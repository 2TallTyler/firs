/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

${industry.get_spritesets()}

${industry.get_spritelayouts()}

${industry.get_industry_layouts_as_graphic_switches()}

${industry.get_fence_switches()}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

TILE_DISALLOW_NEARBY_CLASS(nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (location_check, ${industry.id}_nearby_industry)

switch (FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile_anim_random_delay, (extra_callback_info1 & 3)) {
	0: return 1;
	return 34;
}
switch (FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile_anim_next_frame, animation_frame) {
	1..33: return CB_RESULT_NEXT_FRAME; // animation frames
	34..50: return CB_RESULT_NEXT_FRAME; // spacing frames
	${industry.id}_tile_anim_random_delay;
}

random_switch (FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile_anim_random_trigger, bitmask(TRIGGER_INDUSTRYTILE_TILELOOP)) {
	1: return CB_RESULT_DO_NOTHING;
}

item(FEAT_INDUSTRYTILES, ${industry.id}_tile, TILE_BAUXITEMINE_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[ENSP, 8]];
		land_shape_flags: 0;
		animation_info:     [ANIMATION_LOOPING, 71];
		animation_speed:    2;
		animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_CONSTRUCTION_STATE);
		special_flags:      bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
	}
	graphics {
		tile_check:   ${industry.id}_location_check;
		anim_next_frame:    ${industry.id}_tile_anim_next_frame;
		random_trigger:     ${industry.id}_tile_anim_random_trigger;
		${industry.id}_tile_fences;
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

${industry.get_industry_layouts_as_tilelayouts()}

/* *************************************************
 * Definition of the industry
 * *************************************************/

#define THIS_STR_EXTRA_SUPPLIES STR_EXTRA_ENGINEERING_SUPPLIES
/* availability years */
#define THIS_MIN_YEAR 1923

CHECK_NEARBY_CLUSTER(bauxite_mine,    20, 40, 2, 3, return CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (aluminium_plant, 16, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_bauxite_mine)
CHECK_FOUNDER       (${industry.id}_aluminium_plant)

SWITCH_COLOUR_SCHEME1(${industry.id}_colour)

#include "../templates/produce_primary.pnml"
#include "../templates/check_primary_production_level.pnml"

#include "../templates/extra_text_primary.pnml"

#include "../templates/check_availability.pnml"


item(FEAT_INDUSTRIES, bauxite_mine, ${industry.get_numeric_id()}) {
	property {
		substitute: 0;
		layouts: [${industry.get_industry_layouts_as_property()}];
		life_type:              IND_LIFE_TYPE_EXTRACTIVE;
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;
		name:                   string(STR_IND_BAUXITE_MINE);
		nearby_station_name:    string(STR_STATION, string(STR_TOWN), string(STR_IND_BAUXITE_MINE));
		prod_cargo_types: [AORE];
		accept_cargo_types: [ENSP];
		prod_multiplier: [19, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 5;
		conflicting_ind_types: [];
		prob_random: 6;
		prob_in_game: 10;
		prospect_chance: 0.75;
		fund_cost_multiplier: 238;
		map_colour: 71;
		remove_cost_multiplier: 0;
		spec_flags:             0;
	}
	graphics {
		produce_cargo_arrival:   ${industry.id}_produce;
		construction_probability:${industry.id}_check_availability;
		location_check:          ${industry.id}_check_location;
		produce_256_ticks:       ${industry.id}_produce_256_ticks;
		monthly_prod_change:     ${industry.id}_monthly_update;
		random_prod_change:      ${industry.id}_check_closure;
		build_prod_change:       randomise_primary_production_on_build;
		extra_text_industry:     ${industry.id}_extra_text;
		extra_text_fund:         return string(STR_FUND_AVAILABLE_FROM, THIS_MIN_YEAR);
		colour:                  ${industry.id}_colour;
	}
}
#include "../templates/undefs.pnml"
