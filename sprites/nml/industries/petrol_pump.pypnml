/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#include "../templates/spritelayout_templates.pnml"

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

${industry.get_spritesets()}

${industry.get_spritelayouts()}

${industry.get_industry_layouts_as_graphic_switches()}

${industry.get_fence_switches()}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* Petrol station uses special road check, tailored for each layout separately
 * when called by the game engine
 */
switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile1_layout1_road_check,
			(
			nearby_tile_class( 0, -1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 0,  2) == TILE_CLASS_ROAD ||
			nearby_tile_class(-1,  0) == TILE_CLASS_ROAD ||
			nearby_tile_class(-1,  1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 1,  0) == TILE_CLASS_ROAD ||
			nearby_tile_class( 1,  1) == TILE_CLASS_ROAD
			) ) {
	1: return CB_RESULT_LOCATION_ALLOW;
	return CB_RESULT_LOCATION_DISALLOW;
}
switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile1_layout2_road_check,
			(
			nearby_tile_class( 0, -1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 0,  1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 1, -1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 1,  1) == TILE_CLASS_ROAD ||
			nearby_tile_class(-1,  0) == TILE_CLASS_ROAD ||
			nearby_tile_class( 2,  0) == TILE_CLASS_ROAD
			) ) {
	1: return CB_RESULT_LOCATION_ALLOW;
	return CB_RESULT_LOCATION_DISALLOW;
}
switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile1_layout_check, (extra_callback_info2 & 255)) {
	0: ${industry.id}_tile1_layout1_road_check;
	1: ${industry.id}_tile1_layout2_road_check;
	return CB_RESULT_LOCATION_DISALLOW;
}

TILE_ALLOW_PLAYER         (tile1_player_check, ${industry.id}_tile1_layout_check)
TILE_DISALLOW_SLOPES      (tile1_location_check, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_tile1_player_check)

item(FEAT_INDUSTRYTILES, ${industry.id}_tile, TILE_PETROLPUMP_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[FOOD, 8], [GOOD, 8], [PETR, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
	graphics {
		tile_check:   ${industry.id}_tile1_location_check;
		${industry.id}_tile_fences;
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

${industry.get_industry_layouts_as_tilelayouts()}

/* *************************************************
 * Definition of the industry
 * *************************************************/
/* availability years */
#define THIS_MIN_YEAR 1909

#include "../templates/check_availability.pnml"

CHECK_INCOMPATIBLE  (hotel, 16, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (hardware_store, 16, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_hotel)
CHECK_INCOMPATIBLE  (food_market, 16, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_hardware_store)
CHECK_INCOMPATIBLE  (petrol_pump, 20, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_food_market)
CHECK_FOUNDER       (${industry.id}_petrol_pump)

${industry.get_industry_properties()}

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
	graphics {
		construction_probability:${industry.id}_check_availability;
		extra_text_fund:         return string(STR_FUND_AVAILABLE_FROM, THIS_MIN_YEAR);
		location_check:          ${industry.id}_check_location;
	}
}

#include "../templates/undefs.pnml"
