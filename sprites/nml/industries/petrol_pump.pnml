/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) petrol_pump ## __VA_ARGS__

spriteset(spriteset_6692, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(80, 10) } 
spriteset(spriteset_6693, "sprites/graphics/industries/petrolpump.png") { tmpl_building_sprite(10, 10, 59, -28) } 
spriteset(spriteset_6694, "sprites/graphics/industries/petrolpump.png") { tmpl_building_sprite(80, 10, 59, -28) } 
spritelayout action2_6695 {
	ground {
		sprite: GROUNDSPRITE_CONCRETE;
	}
	building {
		sprite: spriteset_6693;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_6696 {
	ground {
		sprite: GROUNDSPRITE_CONCRETE;
	}
	building {
		sprite: spriteset_6694;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, action2_6697, relative_pos) {
	relative_coord(0, 1): action2_6696;
	action2_6695;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_6698, relative_pos) {
	relative_coord(1, 0): action2_6696;
	action2_6695;
}

switch(FEAT_INDUSTRYTILES, PARENT, action2_6699, layout_num) {
	1: action2_6697;
	2: action2_6698;
	action2_6695;
}

spriteset(spriteset_6701, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(80, 10) } 
spriteset(spriteset_6702, "sprites/graphics/industries/petrolpump.png") { tmpl_building_sprite(10, 10, 59, -28) } 
spriteset(spriteset_6703, "sprites/graphics/industries/petrolpump.png") { tmpl_building_sprite(80, 10, 59, -28) } 
spritelayout action2_6704 {
	ground {
		sprite: GROUNDSPRITE_CONCRETE;
	}
	building {
		sprite: spriteset_6702;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_6705 {
	ground {
		sprite: GROUNDSPRITE_CONCRETE;
	}
	building {
		sprite: spriteset_6703;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, action2_6706, relative_pos) {
	relative_coord(0, 1): action2_6705;
	action2_6704;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_6707, relative_pos) {
	relative_coord(1, 0): action2_6705;
	action2_6704;
}

switch(FEAT_INDUSTRYTILES, PARENT, action2_6708, layout_num) {
	1: action2_6706;
	2: action2_6707;
	action2_6704;
}

spriteset(spriteset_6710, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(80, 10) } 
spriteset(spriteset_6711) { 	[10, 10, 64, 59, -31, -28, 9, "sprites/graphics/industries/petrolpump_snow.png"] } 
spriteset(spriteset_6712) { 	[80, 10, 64, 59, -31, -28, 9, "sprites/graphics/industries/petrolpump_snow.png"] } 
spritelayout action2_6713 {
	ground {
		sprite: GROUNDSPRITE_CONCRETE;
	}
	building {
		sprite: spriteset_6711;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_6714 {
	ground {
		sprite: GROUNDSPRITE_CONCRETE;
	}
	building {
		sprite: spriteset_6712;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, action2_6715, relative_pos) {
	relative_coord(0, 1): action2_6714;
	action2_6713;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_6716, relative_pos) {
	relative_coord(1, 0): action2_6714;
	action2_6713;
}

switch(FEAT_INDUSTRYTILES, PARENT, action2_6717, layout_num) {
	1: action2_6715;
	2: action2_6716;
	action2_6713;
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(tile1_layout), terrain_type) {
	1: action2_6708;
	4: action2_6717;
	action2_6699;
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* Petrol station uses special road check, taylored for each layout separately
 * when called by the game engine 
 */
switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(tile1_layout1_road_check),
			(
			nearby_tile_class( 0, -1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 0,  2) == TILE_CLASS_ROAD ||
			nearby_tile_class(-1,  0) == TILE_CLASS_ROAD ||
			nearby_tile_class(-1,  1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 1,  0) == TILE_CLASS_ROAD ||
			nearby_tile_class( 1,  1) == TILE_CLASS_ROAD
			) ) {
	1: return CB_RESULT_IND_ALLOW_LOCATION;
	return CB_RESULT_IND_DISALLOW_UNSUITABLE;
}
switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(tile1_layout2_road_check),
			(
			nearby_tile_class( 0, -1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 0,  1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 1, -1) == TILE_CLASS_ROAD ||
			nearby_tile_class( 1,  1) == TILE_CLASS_ROAD ||
			nearby_tile_class(-1,  0) == TILE_CLASS_ROAD ||
			nearby_tile_class( 2,  0) == TILE_CLASS_ROAD
			) ) {
	1: return CB_RESULT_IND_ALLOW_LOCATION;
	return CB_RESULT_IND_DISALLOW_UNSUITABLE;
}
switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(tile1_layout_check), (extra_callback_info2 & 255)) {
	0: THIS_ID(tile1_layout1_road_check);
	1: THIS_ID(tile1_layout2_road_check);
	return CB_RESULT_IND_DISALLOW_UNSUITABLE;
}

TILE_ALLOW_PLAYER         (tile1_player_check,                                      THIS_ID(tile1_layout_check))
TILE_ALLOW_ONLY_FLAT_LAND (tile1_location_check, CB_RESULT_IND_DISALLOW_UNSUITABLE, THIS_ID(tile1_player_check))

item(FEAT_INDUSTRYTILES, tile_petrol_pump, 203) {
	property {
		substitute:       0;
		accepted_cargos:  [[FOOD, 8], [GOOD, 8], [PETR, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
	graphics {
		slope_check:  THIS_ID(tile1_location_check);
		THIS_ID(tile1_layout);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_petrol_pump_1 {
	0, 0: tile_petrol_pump;
	0, 1: tile_petrol_pump;
}

tilelayout tilelayout_petrol_pump_2 {
	0, 0: tile_petrol_pump;
	1, 0: tile_petrol_pump;
}
/* *************************************************
 * Definition of the industry
 * *************************************************/
/* availability years */
#define THIS_MIN_YEAR 1909

#include "../templates/produce_blackhole.pnml"
#include "../templates/check_secondary_closure.pnml"
#include "../templates/check_secondary_production_level.pnml"

#include "../templates/extra_text_blackhole.pnml"

#include "../templates/check_availability.pnml"

item(FEAT_INDUSTRIES, petrol_pump, 60) {
	property {
		substitute: 0;
		layouts: [
				tilelayout_petrol_pump_1,
				tilelayout_petrol_pump_2
			];
		life_type:              IND_LIFE_TYPE_BLACK_HOLE;
		name:                   string(STR_IND_PETROLPUMP);
		closure_msg:            TTD_STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS;
		prod_increase_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_INCREASE_GENERAL;
		prod_decrease_msg:      TTD_STR_NEWS_INDUSTRY_PRODUCTION_DECREASE_GENERAL;
		new_ind_msg:            TTD_STR_NEWS_INDUSTRY_CONSTRUCTION;

		prod_cargo_types:       [];
		accept_cargo_types:     [FOOD, GOOD, PETR];

		prod_multiplier:        [0, 0];
		input_multiplier_1:     [0, 0];
		input_multiplier_2:     [0, 0];
		input_multiplier_3:     [0, 0];
		min_cargo_distr:        2;

		conflicting_ind_types:  [];
		spec_flags:             0;
		prob_random:            14;
		prob_in_game:           14;
		prospect_chance:        0.75;
		fund_cost_multiplier:   8;
		remove_cost_multiplier: 0;
		map_colour:             15;
	}
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		availability:            THIS_ID(check_availability);
		monthly_prod_change:     THIS_ID(check_production_level);
		random_prod_change:      THIS_ID(check_closure);
		extra_text_industry:     THIS_ID(extra_text);
		THIS_ID(produce);
	}
}

#include "../templates/undefs.pnml"
