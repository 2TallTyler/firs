/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

item(FEAT_INDUSTRYTILES, tile_lumber_yard, 187) {
	property {
		substitute: 0;
		accepted_cargos: [[WDPR, 8], [RFPR, 8], [0, 0]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
		callback_flags: bitmask(INDTILE_CBF_SLOPE_IS_SUITABLE);
	}
}

spriteset(spriteset_5697, "sprites/graphics/industries/groundtiles.png") { tmpl_ground_tile(10, 10) } 
spriteset(spriteset_5698, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(80, 10, 64, -40) } 
spriteset(spriteset_5699, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(150, 10, 64, -34) } 
spriteset(spriteset_5700, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(220, 10, 64, -19) } 
spriteset(spriteset_5701, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(290, 10, 64, -35) } 
spriteset(spriteset_5702, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(10, 10, 64, -26) } 
spriteset(spriteset_5703, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(150, 90, 31, -4) } 
spriteset(spriteset_5704, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(220, 90, 31, -4) } 
spriteset(spriteset_5705, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(290, 90, 31, -4) } 
spriteset(spriteset_5706, "sprites/graphics/industries/lumberyard.pcx") { tmpl_building_sprite(360, 10, 64, -24) } 
spritelayout action2_5707 {
	ground {
		sprite: 2022;
	}
}

spritelayout action2_5708 {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_5698;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_5709 {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_5699;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_5710 {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_5700;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_5711 {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_5701;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_5712 {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_5702;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_5713 {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_5703;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_5714 {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_5706;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
	building {
		sprite: spriteset_5704;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

spritelayout action2_5715 {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_5705;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
}

switch(FEAT_INDUSTRYTILES, SELF, action2_5716, relative_pos) {
	relative_coord(0, 0): action2_5709;
	relative_coord(0, 1): action2_5708;
	relative_coord(0, 2): action2_5712;
	relative_coord(1, 0): action2_5713;
	relative_coord(1, 1): action2_5710;
	relative_coord(2, 0): action2_5715;
	relative_coord(2, 1): action2_5711;
	relative_coord(1, 2): action2_5715;
	relative_coord(2, 2): action2_5714;
	relative_coord(3, 0): action2_5713;
	relative_coord(3, 1): action2_5712;
	relative_coord(3, 2): action2_5713;
	action2_5707;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_5717, relative_pos) {
	relative_coord(0, 0): action2_5709;
	relative_coord(0, 1): action2_5708;
	relative_coord(0, 2): action2_5712;
	relative_coord(0, 3): action2_5713;
	relative_coord(1, 0): action2_5715;
	relative_coord(1, 1): action2_5715;
	relative_coord(1, 2): action2_5710;
	relative_coord(1, 3): action2_5713;
	relative_coord(2, 0): action2_5712;
	relative_coord(2, 1): action2_5713;
	relative_coord(2, 2): action2_5711;
	relative_coord(2, 3): action2_5714;
	action2_5707;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_5718, relative_pos) {
	relative_coord(0, 0): action2_5713;
	relative_coord(0, 1): action2_5710;
	relative_coord(0, 2): action2_5709;
	relative_coord(0, 3): action2_5708;
	relative_coord(0, 4): action2_5715;
	relative_coord(1, 0): action2_5715;
	relative_coord(1, 1): action2_5711;
	relative_coord(1, 2): action2_5713;
	relative_coord(1, 3): action2_5712;
	relative_coord(1, 4): action2_5714;
	action2_5707;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_5719, relative_pos) {
	relative_coord(0, 0): action2_5710;
	relative_coord(0, 1): action2_5714;
	relative_coord(1, 0): action2_5711;
	relative_coord(1, 1): action2_5713;
	relative_coord(2, 0): action2_5709;
	relative_coord(2, 1): action2_5708;
	relative_coord(3, 0): action2_5715;
	relative_coord(3, 1): action2_5713;
	relative_coord(4, 0): action2_5712;
	relative_coord(4, 1): action2_5713;
	action2_5707;
}

switch(FEAT_INDUSTRYTILES, PARENT, action2_5720, layout_num) {
	1: action2_5716;
	2: action2_5717;
	3: action2_5718;
	4: action2_5719;
	action2_5707;
}

CHECK_NEARBY_TILE_CLASS(action2_5728)

switch(FEAT_INDUSTRYTILES, PARENT, action2_5729, founder) {
	16: action2_5728;
	return 1024;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_5730, var[0x60, 0, 255, 0]) {
	1..255: return 1025;
	action2_5729;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_5731, (current_callback & 255)) {
	INDTILE_CB_SLOPE_IS_SUITABLE: action2_5730;
	action2_5720;
}

item(FEAT_INDUSTRYTILES, tile_lumber_yard, 187) {
	graphics {
		action2_5731;
	}
}

tilelayout tilelayout_lumber_yard_1 {
	0, 0: tile_lumber_yard;
	0, 1: tile_lumber_yard;
	0, 2: tile_lumber_yard;
	1, 0: tile_lumber_yard;
	1, 1: tile_lumber_yard;
	1, 2: tile_lumber_yard;
	2, 0: tile_lumber_yard;
	2, 1: tile_lumber_yard;
	2, 2: tile_lumber_yard;
	3, 0: tile_lumber_yard;
	3, 1: tile_lumber_yard;
	3, 2: tile_lumber_yard;
}

tilelayout tilelayout_lumber_yard_2 {
	0, 0: tile_lumber_yard;
	0, 1: tile_lumber_yard;
	0, 2: tile_lumber_yard;
	0, 3: tile_lumber_yard;
	1, 0: tile_lumber_yard;
	1, 1: tile_lumber_yard;
	1, 2: tile_lumber_yard;
	1, 3: tile_lumber_yard;
	2, 0: tile_lumber_yard;
	2, 1: tile_lumber_yard;
	2, 2: tile_lumber_yard;
	2, 3: tile_lumber_yard;
}

tilelayout tilelayout_lumber_yard_3 {
	0, 0: tile_lumber_yard;
	0, 1: tile_lumber_yard;
	0, 2: tile_lumber_yard;
	0, 3: tile_lumber_yard;
	0, 4: tile_lumber_yard;
	1, 0: tile_lumber_yard;
	1, 1: tile_lumber_yard;
	1, 2: tile_lumber_yard;
	1, 3: tile_lumber_yard;
	1, 4: tile_lumber_yard;
}

tilelayout tilelayout_lumber_yard_4 {
	0, 0: tile_lumber_yard;
	0, 1: tile_lumber_yard;
	1, 0: tile_lumber_yard;
	1, 1: tile_lumber_yard;
	2, 0: tile_lumber_yard;
	2, 1: tile_lumber_yard;
	3, 0: tile_lumber_yard;
	3, 1: tile_lumber_yard;
	4, 0: tile_lumber_yard;
	4, 1: tile_lumber_yard;
}

item(FEAT_INDUSTRIES, lumber_yard, 41) {
	property {
		substitute: 0;
		layouts: [tilelayout_lumber_yard_1, tilelayout_lumber_yard_2, tilelayout_lumber_yard_3, tilelayout_lumber_yard_4];
		life_type: 4;
		closure_msg: 18483;
		prod_increase_msg: 18485;
		prod_decrease_msg: 18489;
		new_ind_msg: 18477;
		name: string(STR_IND_LUMBER_YARD);
		prod_cargo_types: [ENSP, BDMT];
		accept_cargo_types: [WDPR, RFPR];
		prod_multiplier: [0, 0];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		min_cargo_distr: 5;
		conflicting_ind_types: [];
		prob_random: 5;
		prob_in_game: 3;
		prospect_chance: 0.75;
		fund_cost_multiplier: 35;
		map_colour: 42;
		remove_cost_multiplier: 0;
		spec_flags: 0;
		callback_flags: 2365;
	}
}

switch(FEAT_INDUSTRIES, SELF, action2_5734, industry_distance(lumber_yard)) {
	0..56: return 1025;
	return 1024;
}

switch(FEAT_INDUSTRIES, SELF, action2_5735, founder) {
	16: action2_5734;
	return 1024;
}

switch(FEAT_INDUSTRIES, SELF, action2_5736, game_mode) {
	1: action2_5735;
	return 1024;
}

produce(action2_5737, LOAD_TEMP(7), LOAD_TEMP(8), LOAD_TEMP(9), LOAD_TEMP(10), LOAD_TEMP(11), LOAD_TEMP(0));

switch(FEAT_INDUSTRIES, SELF, action2_5738, [STORE_TEMP(0, 0), 1]) {
	0: action2_5737;
	action2_5737;
}

switch(FEAT_INDUSTRIES, SELF, action2_5739, [STORE_TEMP(STORE_PERM(STORE_TEMP(STORE_PERM(0, 11), 11), 10), 10), 1]) {
	0: action2_5738;
	action2_5738;
}

switch(FEAT_INDUSTRIES, SELF, action2_5740, [STORE_TEMP(STORE_PERM(0, 11), 11), STORE_TEMP(STORE_PERM(LOAD_TEMP(10), 10), 10)]) {
	0: action2_5738;
	action2_5738;
}

switch(FEAT_INDUSTRIES, SELF, action2_5741, STORE_TEMP(STORE_PERM(STORE_TEMP(STORE_PERM(max((LOAD_TEMP(10) / 2), 1), 10), 10), 11), 11)) {
	0: action2_5738;
	action2_5738;
}

switch(FEAT_INDUSTRIES, SELF, action2_5742, 2) {
	2: action2_5741;
	action2_5740;
}

switch(FEAT_INDUSTRIES, SELF, action2_5743, STORE_TEMP(((LOAD_PERM(4) + LOAD_PERM(5)) + LOAD_PERM(6)), 10)) {
	0: action2_5739;
	action2_5742;
}

switch(FEAT_INDUSTRIES, SELF, action2_5744, [STORE_TEMP(((LOAD_PERM(6) / LOAD_PERM(12)) * 8), 9), STORE_TEMP(STORE_PERM(((var[0x42, 0, -1] - LOAD_TEMP(9)) + LOAD_TEMP(9)), 9), 9)]) {
	0: action2_5743;
	action2_5743;
}

switch(FEAT_INDUSTRIES, SELF, action2_5745, [STORE_TEMP(((LOAD_PERM(5) / LOAD_PERM(12)) * 8), 8), STORE_TEMP(STORE_PERM(((var[0x41, 0, -1] - LOAD_TEMP(8)) + LOAD_TEMP(8)), 8), 8)]) {
	0: action2_5744;
	action2_5744;
}

switch(FEAT_INDUSTRIES, SELF, action2_5746, [STORE_TEMP(((LOAD_PERM(4) / LOAD_PERM(12)) * 8), 7), STORE_TEMP(STORE_PERM(((var[0x40, 0, -1] - LOAD_TEMP(7)) + LOAD_TEMP(7)), 7), 7)]) {
	0: action2_5745;
	action2_5745;
}

switch(FEAT_INDUSTRIES, SELF, action2_5747, STORE_PERM(max(min(((var[0x42, 0, -1] / 8) * LOAD_PERM(12)), LOAD_PERM(0)), 1), 6)) {
	0: action2_5746;
	action2_5746;
}

switch(FEAT_INDUSTRIES, SELF, action2_5748, [STORE_PERM(0, 6), var[0x42, 0, -1]]) {
	0: action2_5746;
	action2_5747;
}

switch(FEAT_INDUSTRIES, SELF, action2_5749, STORE_PERM(max(min(((var[0x41, 0, -1] / 8) * LOAD_PERM(12)), LOAD_PERM(0)), 1), 5)) {
	0: action2_5748;
	action2_5748;
}

switch(FEAT_INDUSTRIES, SELF, action2_5750, [STORE_PERM(0, 5), var[0x41, 0, -1]]) {
	0: action2_5748;
	action2_5749;
}

switch(FEAT_INDUSTRIES, SELF, action2_5751, STORE_PERM(max(min(((var[0x40, 0, -1] / 8) * LOAD_PERM(12)), LOAD_PERM(0)), 1), 4)) {
	0: action2_5750;
	action2_5750;
}

switch(FEAT_INDUSTRIES, SELF, action2_5752, [STORE_PERM(0, 4), var[0x40, 0, -1]]) {
	0: action2_5750;
	action2_5751;
}

switch(FEAT_INDUSTRIES, SELF, action2_5753, STORE_PERM(((0 + LOAD_PERM(1)) + LOAD_PERM(2)), 12)) {
	0: action2_5752;
	action2_5752;
}

switch(FEAT_INDUSTRIES, SELF, action2_5754, [STORE_PERM(0, 2), 1]) {
	0: action2_5753;
	action2_5753;
}

switch(FEAT_INDUSTRIES, SELF, action2_5755, [STORE_PERM(2, 2), STORE_PERM((1 + LOAD_PERM(14)), 14)]) {
	0: action2_5753;
	action2_5753;
}

switch(FEAT_INDUSTRIES, SELF, action2_5756, LOAD_PERM(14)) {
	0..7: action2_5755;
	action2_5754;
}

switch(FEAT_INDUSTRIES, SELF, action2_5757, [STORE_PERM(0, 14), 1]) {
	0: action2_5755;
	action2_5755;
}

switch(FEAT_INDUSTRIES, SELF, action2_5758, (waiting_cargo_2 + waiting_cargo_3)) {
	0: action2_5756;
	action2_5757;
}

switch(FEAT_INDUSTRIES, SELF, action2_5759, [STORE_PERM(0, 1), 1]) {
	0: action2_5758;
	action2_5758;
}

switch(FEAT_INDUSTRIES, SELF, action2_5760, [STORE_PERM(6, 1), STORE_PERM((1 + LOAD_PERM(13)), 13)]) {
	0: action2_5758;
	action2_5758;
}

switch(FEAT_INDUSTRIES, SELF, action2_5761, LOAD_PERM(13)) {
	0..7: action2_5760;
	action2_5759;
}

switch(FEAT_INDUSTRIES, SELF, action2_5762, [STORE_PERM(0, 13), 1]) {
	0: action2_5760;
	action2_5760;
}

switch(FEAT_INDUSTRIES, SELF, action2_5763, waiting_cargo_1) {
	0: action2_5761;
	action2_5762;
}

switch(FEAT_INDUSTRIES, SELF, action2_5764, STORE_TEMP((rotate((LOAD_PERM(15) & 65535), 16) | (LOAD_PERM(14) & 65535)), 261)) {
	0: return string(STR_INFO_DEBUG_PRODUCTION_CONTRIBUTION);
	return string(STR_INFO_DEBUG_PRODUCTION_CONTRIBUTION);
}

switch(FEAT_INDUSTRIES, SELF, action2_5765, STORE_TEMP((rotate((LOAD_PERM(13) & 65535), 16) | (LOAD_PERM(12) & 65535)), 260)) {
	0: action2_5764;
	action2_5764;
}

switch(FEAT_INDUSTRIES, SELF, action2_5766, STORE_TEMP((rotate((LOAD_PERM(11) & 65535), 16) | (LOAD_PERM(10) & 65535)), 259)) {
	0: action2_5765;
	action2_5765;
}

switch(FEAT_INDUSTRIES, SELF, action2_5767, STORE_TEMP((rotate((LOAD_PERM(9) & 65535), 16) | (LOAD_PERM(8) & 65535)), 258)) {
	0: action2_5766;
	action2_5766;
}

switch(FEAT_INDUSTRIES, SELF, action2_5768, STORE_TEMP((rotate((LOAD_PERM(7) & 65535), 16) | (LOAD_PERM(3) & 65535)), 257)) {
	0: action2_5767;
	action2_5767;
}

switch(FEAT_INDUSTRIES, SELF, action2_5769, STORE_TEMP((rotate((LOAD_PERM(2) & 65535), 16) | (LOAD_PERM(1) & 65535)), 256)) {
	0: action2_5768;
	action2_5768;
}

switch(FEAT_INDUSTRIES, SELF, action2_5770, show_debug_texts) {
	1: action2_5769;
	return string(STR_EXTRA_LUMBER_YARD);
}

switch(FEAT_INDUSTRIES, SELF, action2_5771, STORE_PERM((65535 / 2), 0)) {
	0: action2_5763;
	action2_5763;
}

CHECK_OPENING(action2_5774, 0, -1)

switch(FEAT_INDUSTRIES, SELF, action2_5775, [STORE_TEMP(-701265, 256), 32933]) {
	return;
}

SWITCH_COLOUR_SCHEME1(action2_5778)

SET_PRODUCTION_COUNTER_PRODUCED(action2_5781)

CHECK_CLOSE_SECONDARY(action2_5784)

switch(FEAT_INDUSTRIES, SELF, switch_main_lumber_yard, current_callback) {
	0: action2_5771;
	IND_CB_LOCATION_CHECK: action2_5736;
	IND_CB_AVAILABILITY: action2_5774;
	IND_CB_COLOUR: action2_5778;
	IND_CB_EXTRA_TEXT_FUND: action2_5775;
	IND_CB_RANDOM_PROD_CHANGE: action2_5784;
	IND_CB_MONTHLY_PROD_CHANGE: action2_5781;
	IND_CB_EXTRA_TEXT_INDUSTRY: action2_5770;
	action2_5738;
}

item(FEAT_INDUSTRIES, lumber_yard, 41) {
	graphics {
		switch_main_lumber_yard;
	}
}
