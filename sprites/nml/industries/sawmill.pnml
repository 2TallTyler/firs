/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */


item(FEAT_INDUSTRIES, sawmill, 12) {
	property {
		substitute: 2;
		override: 2;
		nearby_station_name: string(STR_STATIONNAME_MILLS);
		prod_cargo_types: [WDPR];
		accept_cargo_types: [WOOD];
		input_multiplier_1: [0, 0];
		input_multiplier_2: [0, 0];
		input_multiplier_3: [0, 0];
		conflicting_ind_types: [];
		prob_random: 5;
		prob_in_game: 2;
		fund_cost_multiplier: 97;
		map_colour: 194;
		callback_flags: 317;
	}
}

switch(FEAT_INDUSTRIES, SELF, action2_7242, industry_distance(forest)) {
	16..60: return 1024;
	return 4;
}

switch(FEAT_INDUSTRIES, SELF, action2_7243, (((industry_count(11) * 5) / 4) / industry_clusters)) {
	0: return 1024;
	action2_7242;
}

switch(FEAT_INDUSTRIES, SELF, action2_7244, STORE_TEMP(-1, 256)) {
	0: action2_7243;
	action2_7243;
}

switch(FEAT_INDUSTRIES, SELF, action2_7245, industry_distance(forest)) {
	0..16: return 4;
	action2_7244;
}

switch(FEAT_INDUSTRIES, SELF, action2_7246, founder) {
	16: action2_7245;
	return 1024;
}

switch(FEAT_INDUSTRIES, SELF, action2_7247, game_mode) {
	1: action2_7246;
	return 1024;
}

produce(action2_7248, LOAD_TEMP(7), LOAD_TEMP(8), LOAD_TEMP(9), LOAD_TEMP(10), LOAD_TEMP(11), LOAD_TEMP(0));

switch(FEAT_INDUSTRIES, SELF, action2_7249, [STORE_TEMP(0, 0), 1]) {
	0: action2_7248;
	action2_7248;
}

switch(FEAT_INDUSTRIES, SELF, action2_7250, [STORE_TEMP(STORE_PERM(STORE_TEMP(STORE_PERM(0, 11), 11), 10), 10), 1]) {
	0: action2_7249;
	action2_7249;
}

switch(FEAT_INDUSTRIES, SELF, action2_7251, [STORE_TEMP(STORE_PERM(0, 11), 11), STORE_TEMP(STORE_PERM(LOAD_TEMP(10), 10), 10)]) {
	0: action2_7249;
	action2_7249;
}

switch(FEAT_INDUSTRIES, SELF, action2_7252, STORE_TEMP(STORE_PERM(STORE_TEMP(STORE_PERM(max((LOAD_TEMP(10) / 1), 1), 10), 10), 11), 11)) {
	0: action2_7249;
	action2_7249;
}

switch(FEAT_INDUSTRIES, SELF, action2_7253, 1) {
	2: action2_7252;
	action2_7251;
}

switch(FEAT_INDUSTRIES, SELF, action2_7254, STORE_TEMP(((LOAD_PERM(4) + LOAD_PERM(5)) + LOAD_PERM(6)), 10)) {
	0: action2_7250;
	action2_7253;
}

switch(FEAT_INDUSTRIES, SELF, action2_7255, [STORE_TEMP(((LOAD_PERM(6) / LOAD_PERM(12)) * 8), 9), STORE_TEMP(STORE_PERM(((var[0x42, 0, -1] - LOAD_TEMP(9)) + LOAD_TEMP(9)), 9), 9)]) {
	0: action2_7254;
	action2_7254;
}

switch(FEAT_INDUSTRIES, SELF, action2_7256, [STORE_TEMP(((LOAD_PERM(5) / LOAD_PERM(12)) * 8), 8), STORE_TEMP(STORE_PERM(((var[0x41, 0, -1] - LOAD_TEMP(8)) + LOAD_TEMP(8)), 8), 8)]) {
	0: action2_7255;
	action2_7255;
}

switch(FEAT_INDUSTRIES, SELF, action2_7257, [STORE_TEMP(((LOAD_PERM(4) / LOAD_PERM(12)) * 8), 7), STORE_TEMP(STORE_PERM(((var[0x40, 0, -1] - LOAD_TEMP(7)) + LOAD_TEMP(7)), 7), 7)]) {
	0: action2_7256;
	action2_7256;
}

switch(FEAT_INDUSTRIES, SELF, action2_7258, STORE_PERM(max(min(((var[0x42, 0, -1] / 8) * LOAD_PERM(3)), LOAD_PERM(0)), 1), 6)) {
	0: action2_7257;
	action2_7257;
}

switch(FEAT_INDUSTRIES, SELF, action2_7259, [STORE_PERM(0, 6), var[0x42, 0, -1]]) {
	0: action2_7257;
	action2_7258;
}

switch(FEAT_INDUSTRIES, SELF, action2_7260, STORE_PERM(max(min(((var[0x41, 0, -1] / 8) * LOAD_PERM(2)), LOAD_PERM(0)), 1), 5)) {
	0: action2_7259;
	action2_7259;
}

switch(FEAT_INDUSTRIES, SELF, action2_7261, [STORE_PERM(0, 5), var[0x41, 0, -1]]) {
	0: action2_7259;
	action2_7260;
}

switch(FEAT_INDUSTRIES, SELF, action2_7262, STORE_PERM(max(min(((var[0x40, 0, -1] / 8) * LOAD_PERM(1)), LOAD_PERM(0)), 1), 4)) {
	0: action2_7261;
	action2_7261;
}

switch(FEAT_INDUSTRIES, SELF, action2_7263, [STORE_PERM(0, 4), var[0x40, 0, -1]]) {
	0: action2_7261;
	action2_7262;
}

switch(FEAT_INDUSTRIES, SELF, action2_7264, STORE_PERM(1, 3)) {
	0: action2_7263;
	action2_7263;
}

switch(FEAT_INDUSTRIES, SELF, action2_7265, STORE_PERM(1, 2)) {
	0: action2_7264;
	action2_7264;
}

switch(FEAT_INDUSTRIES, SELF, action2_7266, STORE_PERM(6, 1)) {
	0: action2_7265;
	action2_7265;
}

switch(FEAT_INDUSTRIES, SELF, action2_7267, STORE_TEMP(LOAD_PERM(0), 260)) {
	0: return string(STR_INFO_DEBUG_PRODUCTION_RATIO);
	return string(STR_INFO_DEBUG_PRODUCTION_RATIO);
}

switch(FEAT_INDUSTRIES, SELF, action2_7268, STORE_TEMP((rotate((LOAD_PERM(11) & 65535), 16) | (LOAD_PERM(10) & 65535)), 259)) {
	0: action2_7267;
	action2_7267;
}

switch(FEAT_INDUSTRIES, SELF, action2_7269, STORE_TEMP((rotate((LOAD_PERM(9) & 65535), 16) | (LOAD_PERM(8) & 65535)), 258)) {
	0: action2_7268;
	action2_7268;
}

switch(FEAT_INDUSTRIES, SELF, action2_7270, STORE_TEMP((rotate((LOAD_PERM(7) & 65535), 16) | (LOAD_PERM(3) & 65535)), 257)) {
	0: action2_7269;
	action2_7269;
}

switch(FEAT_INDUSTRIES, SELF, action2_7271, STORE_TEMP((rotate((LOAD_PERM(2) & 65535), 16) | (LOAD_PERM(1) & 65535)), 256)) {
	0: action2_7270;
	action2_7270;
}

switch(FEAT_INDUSTRIES, SELF, action2_7272, show_debug_texts) {
	1: action2_7271;
	return string(STR_GENERIC_D00C);
}

switch(FEAT_INDUSTRIES, SELF, action2_7273, STORE_PERM((65535 / 1), 0)) {
	0: action2_7266;
	action2_7266;
}

CHECK_OPENING(action2_7276, 0, -1)

switch(FEAT_INDUSTRIES, SELF, action2_7277, [STORE_TEMP(-701265, 256), 32928]) {
	return;
}

SWITCH_COLOUR_SCHEME1(action2_7280)

SET_PRODUCTION_COUNTER_PRODUCED(action2_7283)

CHECK_CLOSE_SECONDARY(action2_7286)

switch(FEAT_INDUSTRIES, SELF, action2_7287, current_callback) {
	0: action2_7273;
	IND_CB_LOCATION_CHECK: action2_7247;
	IND_CB_AVAILABILITY: action2_7276;
	IND_CB_COLOUR: action2_7280;
	IND_CB_CARGO_OUTPUT: action2_7199;
	IND_CB_EXTRA_TEXT_FUND: action2_7277;
	IND_CB_RANDOM_PROD_CHANGE: action2_7286;
	IND_CB_MONTHLY_PROD_CHANGE: action2_7283;
	IND_CB_EXTRA_TEXT_INDUSTRY: action2_7272;
	action2_7249;
}

item(FEAT_INDUSTRIES, sawmill, 12) {
	graphics {
		action2_7287;
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_11, 11) {
	property {
		substitute: 11;
		override: 11;
		accepted_cargos: [[WOOD, 8], [0, 0], [0, 0]];
		land_shape_flags: 0;
		callback_flags: bitmask(INDTILE_CBF_SLOPE_IS_SUITABLE);
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_12, 12) {
	property {
		substitute: 12;
		override: 12;
		accepted_cargos: [[WOOD, 8], [0, 0], [0, 0]];
		land_shape_flags: 0;
		callback_flags: bitmask(INDTILE_CBF_SLOPE_IS_SUITABLE);
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_13, 13) {
	property {
		substitute: 13;
		override: 13;
		accepted_cargos: [[WOOD, 8], [0, 0], [0, 0]];
		land_shape_flags: 0;
		callback_flags: bitmask(INDTILE_CBF_SLOPE_IS_SUITABLE);
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_14, 14) {
	property {
		substitute: 14;
		override: 14;
		accepted_cargos: [[WOOD, 8], [0, 0], [0, 0]];
		land_shape_flags: 0;
		callback_flags: bitmask(INDTILE_CBF_SLOPE_IS_SUITABLE);
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_15, 15) {
	property {
		substitute: 15;
		override: 15;
		accepted_cargos: [[WOOD, 8], [0, 0], [0, 0]];
		land_shape_flags: 0;
		callback_flags: bitmask(INDTILE_CBF_SLOPE_IS_SUITABLE);
	}
}

CHECK_NEARBY_TILE_CLASS(action2_7301)

switch(FEAT_INDUSTRYTILES, PARENT, action2_7302, founder) {
	16: action2_7301;
	return 1024;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_7303, var[0x60, 4, 1, 0]) {
	1: return 1025;
	action2_7302;
}

switch(FEAT_INDUSTRYTILES, SELF, action2_7304, (current_callback & 255)) {
	INDTILE_CB_SLOPE_IS_SUITABLE: action2_7303;
	CB_FAILED;
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_11, 11) {
	graphics {
		action2_7304;
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_12, 12) {
	graphics {
		action2_7304;
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_13, 13) {
	graphics {
		action2_7304;
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_14, 14) {
	graphics {
		action2_7304;
	}
}

item(FEAT_INDUSTRYTILES, item_FEAT_INDUSTRYTILES_15, 15) {
	graphics {
		action2_7304;
	}
}


