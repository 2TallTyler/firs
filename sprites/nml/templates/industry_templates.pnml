/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * The opening behaviour of industries opened randomly by the game
 * can be controlled by a NewGRF parameter
 */
#define CHECK_OPENING(switchname, minyear, maxyear) \
switch(FEAT_INDUSTRIES, SELF, switchname ## _year_check, (current_date + 1)) { \
	date(minyear, 1, 1) .. date(maxyear, 1, 1): return CB_RESULT_IND_ALLOW; \
	return CB_RESULT_IND_DISALLOW; \
} \
 \
switch(FEAT_INDUSTRIES, SELF, switchname ## _founder_check, (extra_callback_info2 & 255)) { \
	1: return CB_RESULT_IND_DISALLOW; \
	2: return CB_RESULT_IND_DISALLOW; \
	switchname ## _year_check; \
} \
 \
switch(FEAT_INDUSTRIES, SELF, switchname, restrict_open_during_gameplay) { \
	1..255: switchname ## _founder_check; \
	switchname ## _year_check; \
}


/*
 * The closure behaviour of secondary industries
 * can be controlled by a NewGRF parameter
 */
#define CHECK_CLOSE_SECONDARY(switchname) \
switch(FEAT_INDUSTRIES, SELF, switchname ## _founder, (extra_callback_info2 & 1)) { \
	0: return CB_RESULT_IND_PROD_CLOSE; \
	return CB_RESULT_IND_PROD_NO_CHANGE; \
} \
switch(FEAT_INDUSTRIES, SELF, switchname ## _had_produced_check, LOAD_PERM(15)) { \
	0..18: return CB_RESULT_IND_PROD_NO_CHANGE; \
	switchname ## _founder; \
} \
switch(FEAT_INDUSTRIES, SELF, switchname, allow_close_secondary) { \
	1..255: switchname ## _had_produced_check; \
	return CB_RESULT_IND_PROD_NO_CHANGE; \
}

/*
 * Template which maps the random colour of an industry to an actual
 * colour
 */

#define SWITCH_COLOUR_SCHEME1(name) \
switch(FEAT_INDUSTRIES, SELF, name, colour) { \
	0: return 0; \
	1: return 1; \
	2: return 2; \
	3: return 13; \
	4: return 2; \
	5: return 5; \
	6: return 1; \
	7: return 1; \
	8: return 0; \
	9: return 14; \
	10: return 10; \
	11: return 11; \
	12: return 13; \
	13: return 13; \
	14: return 14; \
	15: return 14; \
	return 0; \
}

#define SWITCH_COLOUR_SCHEME2(name) \
switch(FEAT_INDUSTRIES, SELF, name, colour) { \
	0: return 5; \
	1: return 1; \
	2: return 2; \
	3: return 3; \
	4: return 2; \
	5: return 5; \
	6: return 1; \
	7: return 7; \
	8: return 5; \
	9: return 14; \
	10: return 10; \
	11: return 10; \
	12: return 3; \
	13: return 13; \
	14: return 14; \
	15: return 15; \
	return 0; \
}

/*
 * Check for production last month and increase 'no production counter'
 * if nothing was produced or reset, if something was produced
 */
#define SET_PRODUCTION_COUNTER_PRODUCED(name) \
switch(FEAT_INDUSTRIES, SELF, name ## _increase_no_production, STORE_PERM((1 + LOAD_PERM(store_closure_counter)), store_closure_counter)) { \
	return 0; \
} \
switch(FEAT_INDUSTRIES, SELF, name ## _reset_no_production, [STORE_PERM(0, store_closure_counter), 1]) { \
	return 0; \
} \
switch(FEAT_INDUSTRIES, SELF, name, produced_last_month_1) { \
	0: name ## _increase_no_production; \
	name ## _reset_no_production; \
}

