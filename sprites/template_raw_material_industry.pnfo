   0 * 4	 1C 00 00 00
    1 * 36	 08 06 "AP" 02 01 "Industry Chain" 00 "Industry Chain" 00
    2 * 19	 04 0A 9F 01 00 DC "Catfood Mine" 00
    3 * 45	 00 0A 0F 01 00 // action 0 for industry
      08 00 // substitute industry type (use FF to disable default industry with this ID)
      09 00 // industry type override (to replace a disabled industry, don't use prop 09)
      0B 01 // industry production flags (1=extractive, 2= organic, 4=processing, 0=accepts only, will never close)
      10 01 08 // cargo types produced
      11 07 FF FF FF // cargo types accepted
      12 00 // production multiplier cargo 1
      13 0A // production multiplier cargo 2
      16 FF FF FF // conflicting industry types
      17 02 // probability in random game (range 0-10)
      18 02 // probability during gameplay (range 0-10)
      19 D0 // map color (index from DOS palette)
      1A 00 00 00 00 // flags for special behaviour
      1F 00 DC // text string to use for name
      21 6C // callback flags (4=256 tick production callback, 8=determine location, 40=cargo subtype display) 
      22 01 // callback flags (1=show additional text in industry window)
    4 * 16	 04 00 9F 01 01 D0 " (canned)" 00
    5 * 44	 04 00 9F 01 02 D0 90 " Mmmm, chunky cat food: cats love it" 00
    6 * 48	 04 00 9F 01 03 D0 94 " Cats prefer population greater than 300" 00    
    7 * 58	 04 00 9F 01 04 D0 94 " Cats like to be within 5 tiles of a Power Station" 00    

    8 * 10	 02 0A 2A // setup production callback (may not be used, but is required to teminate var action 2 chain)
      01  // callback version
      98 // register for amount to subtract from first accepted cargo
      00 // ...second accepted cargo
      00 // ...third accepted cargo
      00 // register for amount to add to first produced cargo
      00 // ...second produced cargo
      00


//!!Warning (100): Default ID appears earlier in sprite.
    9 * 51	 02 0A 1B
      89 // using type 89 because register IDs are better specified as double words
        1A 20 01 00 00 00 // create a value (constant 1A anded (20) with following bytes) 
        0E  1A  20 98 00 00 00 // store in register
        0F // end calculation, start afresh
        1A 20 01 00 00 00 // create a value (constant 1A anded (20) with following bytes) 
        0E  1A  20 99 00 00 00 // store in register
        0F // end calculation, start afresh
        1A 00 00 00 00 FF
       01
         2A 00 00 00 00 00 00 00 00 00
       2A 00

//!!Warning (100): Default ID appears earlier in sprite.
   10 * 51	 02 0A 1C
      89 // using type 89 because register IDs are better specified as double words
        1A 20 05 00 00 00 // create a value (constant 1A anded (20) with following bytes) 
        0E  1A  20 98 00 00 00 // store in register
        0F // end calculation, start afresh
        1A 20 05 00 00 00 // create a value (constant 1A anded (20) with following bytes) 
        0E  1A  20 99 00 00 00 // store in register
        0F // end calculation, start afresh
        1A 00 00 00 00 FF
       01
         2A 00 00 00 00 00 00 00 00 00
       2A 00

   11 * 15	 02 0A 1A 81 // check distance to nearest industry of type n
       64 01 00 FF // check variable 67, with industry type in first byte after variable 
       01 // check one range
         1C 00 00 05 // return CB ID if distance is in range 0 - 5 (use a byte for each end of range)
       1B 00 // else return CB ID

   12 * 14	 02 0A 0C // return subtext for first produced cargo type
      81 18 00 FF 01 
          01 80 03 03   // D001
        FF FF

   13 * 15	 02 0A 0E 81 // check distance to nearest industry of type n
       64 01 00 FF // check variable 67, with industry type in first byte after variable 
       01 // check one range
         00 84 00 05 // build industry if distance is in range 0 - 5 (use a byte for each end of range)
       04 80 // otherwise return string D0 04

   14 * 17	 02 0A 0B 
      86 82 00 FF FF 01  // check town population 
          0E 00 2C 01 FF FF // return next action 2 ID if population is greater than 300 (2C 01)
         03 80 // otherwise returns string D0 03

// CBs
   15 * 26	 02 0A 0D
      81 0C 00 FF
        04
           0B 00 28 28 // // can industry be built?
           0C 00 37 37   // cargo sub-text
           02 80 3A 3A   // industry window text (returns D0 02)
           01 84 35 35   // monthly production change (independent of production callback)
        1A 00         // default
// attach industry callbacks to industry
   16 * 7	 03 0A 01 00
      00 0D 00 

// industry tiles
   17 * 20	 00 09 06 01 B5
    08 00
    09 00
    0A 00 00
    0B 07 08
    0C 00 00
    0E 04
