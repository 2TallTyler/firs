// Defines for use in industry template
#define THIS_INDUSTRY                 IND_FISHPROCESSOR
#define THIS_NUM_INPUT_CARGOS         \d02
#define THIS_NUM_OUTPUT_CARGOS        \d01
// manufacturing supplies should be in first slot for this to work correctly
#define THIS_PROD_RATIO_CARGO_IN_1    \d03
#define THIS_PROD_RATIO_CARGO_IN_2_3  \d05
#define THIS_STR_INFO_CB38            STR_INFO_GENERIC
//Industry tiles definition

//Tile action 0
-1 * 0 00 09 \b5 01 TILE_FISHPROCESSOR_1 // -1 * 0 00 09 <num-props> 01 <id>
	08 TILE_NULL //subsitute type
	0A CARGO_FISH 08 //tile acceptance 1
	0B CARGO_MANUFACTURINGSUPPLIES 08 //tile acceptance 2
	0C 00 00 //tile acceptance 3
	0D 10 //land shape flags: 10 = only on flat land


//Industry tile sprites; one sprite for each tile; eventually more for each tile to include  construction stages

//Tile action 1
-1 * 0 01 09 \b11 \b1 //-1 * 0 01 09 <num-sets> <num-ent>
// Format: spritenum pcxfile xpos ypos compression ysize xsize xrel yrel
-1 sprites/pcx/industries/meatpacker.pcx  10 10 09  44 64 -31 -13
-1 sprites/pcx/industries/meatpacker.pcx  80 10 09  74 64 -31 -43
-1 sprites/pcx/industries/meatpacker.pcx 150 10 09  88 64 -31 -57
-1 sprites/pcx/industries/meatpacker.pcx 220 10 09  85 64 -31 -54
-1 sprites/pcx/industries/meatpacker.pcx 290 10 09  104 64 -31 -73
-1 sprites/pcx/industries/meatpacker.pcx 360 10 09  91 64 -31 -60
-1 sprites/pcx/industries/meatpacker.pcx 430 10 09  98 64 -31 -67
-1 sprites/pcx/industries/meatpacker.pcx 500 10 09  54 64 -31 -23
-1 sprites/pcx/industries/meatpacker.pcx 570 10 09  76 64 -31 -45
-1 sprites/pcx/industries/meatpacker.pcx 640 10 09  32 64 -31 -1
-1 sprites/pcx/industries/meatpacker.pcx 710 10 09  49 64 -31 -18


//Tile action 2 
-1 * 0 02 09 00 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008000 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b32 //xextent yextent zextent
-1 * 0 02 09 01 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008001 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b32 //xextent yextent zextent
-1 * 0 02 09 02 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008002 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b32 //xextent yextent zextent
-1 * 0 02 09 03 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008003 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b32 //xextent yextent zextent
-1 * 0 02 09 04 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008004 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b96 //xextent yextent zextent
-1 * 0 02 09 05 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008005 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b64 //xextent yextent zextent
-1 * 0 02 09 06 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008006 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b64 //xextent yextent zextent
-1 * 0 02 09 07 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008007 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b48 //xextent yextent zextent
-1 * 0 02 09 08 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008008 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b48 //xextent yextent zextent
-1 * 0 02 09 09 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx80008009 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b48 //xextent yextent zextent
-1 * 0 02 09 0A 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\dx8000800A //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b8 //xextent yextent zextent
-1 * 0 02 09 0B 00 //-1 * 0 02 09 <set-id> 00
	\d1420 //groundsprite
	\d0 //building sprite
	\b0 \b0 //xofs yofs
	\b16 \b16 \b8 //xextent yextent zextent


//-1 * 0 02 09 <set-id> <type> <variable> <varadjust> <nvar> (<set-id> <low-range> <high-range>){n} <default>

-1 * 0 02 09 B1 //layout 1
	85 43 //check relative position (00yx[YYXX])
	00 FF FF //don't shift, don't mask
	\b13 //number of ranges to check (number of tiles)
	\wx00   04 00  04 00
	\wx01   04 01  04 01
	\wx02   04 02  04 02
	\wx03   04 03  04 03
	\wx04   03 01  03 01
	\wx05   03 02  03 02
	\wx06   03 03  03 03
	\wx07   01 01  01 01
	\wx08   01 02  01 02
	\wx09   01 03  01 03
	\wx0B   03 00  03 00
	\wx0B   00 01  00 01
	\wx0B   00 03  00 03
	\wx0A //00 02  00 02 <default>

-1 * 0 02 09 A0 
	82 44 //check layout number (lowest byte of related industry)
	00 FF //don't shift, don't mask
	\b1 //number of ranges to check (number of layouts)
	\wxB1 \b1 \b1 //<set-id \w> <low-range> <high-range>
	\wx00 //<default> (first layout available)


//Action3 attach sprites to industry tile

//Tile action 3
-1 * 0 03 09 01 TILE_FISHPROCESSOR_1 00 \wxA0 //-1 * 0 03 09 <n-ids> <id> 00 <def-cid>



//Industry definition

//Action 0
-1 * 0 00 0A \b27 01 IND_FISHPROCESSOR //-1 * 0 00 0A <num-props> 01 <id>
	08 IND_NULL //reuse original industry with this here ID
	0A 01 //number of industry layouts
		\d62 //sum(size of layout definition +2 for termination)
		//layout:
			00 00 FE TILE_GENERIC_CONCRETE 00
			00 01 FE TILE_FISHPROCESSOR_1 00 //xoffs yoffs FE newtile(W)
			00 02 FE TILE_FISHPROCESSOR_1 00
			00 03 FE TILE_FISHPROCESSOR_1 00
			01 00 FE TILE_GENERIC_CONCRETE 00
			01 01 FE TILE_FISHPROCESSOR_1 00
			01 02 FE TILE_FISHPROCESSOR_1 00
			01 03 FE TILE_FISHPROCESSOR_1 00
			02 00 FE TILE_GENERIC_CONCRETE 00
			02 01 FE TILE_GENERIC_CONCRETE 00
			02 02 FE TILE_GENERIC_CONCRETE 00
			02 03 FE TILE_GENERIC_CONCRETE 00
		00 80 //terminate layout definition
	0B 04 //production flags 1h=extractive, 2h=organic, 4h=processing
	0C STR_IND_CLOSE_GENERIC //industry closure message
	0D STR_IND_PRODINCR_GENERIC //production increase message
	0E STR_IND_PRODDECR_GENERIC //production decrease message
	1B STR_IND_NEW_GENERIC //new industry message
	1F STR_IND_FISHPROCESSOR //industry name
	24 STR_STA_FACTORY //default text for nearby station
	10 CARGO_FOOD FF //production cargo types (word; fill unused with FFh)
	11 CARGO_FISH CARGO_MANUFACTURINGSUPPLIES FF FF //acceptance cargo types (dword; fill unused with FFh)
	12 \b0 //production multiplier cargo 1
	13 00 //production multiplier cargo 2
	1C \w0 \w0 //input cargo 1 multiplier (dword M1 M2; output_typen = X*Mn/256)
	1D \w0  \w0  //input cargo 2 multiplier
	1E \w0   \w0   //input cargo 3 multiplier
	14 \b05 //minimal cargo distribution amount
	16 FF FF FF //conflicting industry types (3*byte; ID+80h; FF to disable)
	17 \b5 //probability in random game
	18 \b3 //probability during gameplay
	20 FF FF FF BF //prospecting success chance (dword; FFFFFFFFh=100%)
	0F \b255 //fund cost multiplier (byte)
	19 CLR_FISHPROCESSOR //map colour (byte; using indexes from dos palette)
	23 \d0  //destruction cost multiplier (dword; default: 0)
	1A \dx1000 //special industry flag (dword)
	21 84 //callback flags 
	22 01  //callback flags
//To show cargo waiting to be processed at industry, ensure prop 21 is set to use production callback

//No action 1 for industries, as graphics are defined by the industry-tile feature.

#include "../../templates/template_secondary_action23_C.pnfo"
