/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

/* **************
 * tile_trees
 * *************/

<tal:spritelayout define="tree_temperate_a 1593; tree_temperate_b 1586">
    // ground awareness of spritelayout can probably be folded into standard spritelayouts? (only forest uses that template)
    <tal:include metal:use-macro="load: spritelayouts_groundaware.pynml" />
        building {
            sprite: ${tree_temperate_b};
            xoffset: 2;
            yoffset: 2;
            xextent: 13;
            yextent: 13;
            hide_sprite: climate != CLIMATE_TEMPERATE;
        }
        building {
            sprite: ${tree_temperate_a};
            xoffset: 8;
            yoffset: 2;
            xextent: 7;
            yextent: 13;
            hide_sprite: climate != CLIMATE_TEMPERATE;
        }
        building {
            sprite: ${tree_temperate_a};
            yoffset: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_TEMPERATE;
        }
        building {
            sprite: ${tree_temperate_b};
            xoffset: 8;
            yoffset: 7;
            xextent: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_TEMPERATE;
        }

        building {
            sprite: 1817;
            xoffset: 2;
            yoffset: 2;
            xextent: 13;
            yextent: 13;
            hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height;
        }
        building {
            sprite: 1775;
            xoffset: 8;
            yoffset: 2;
            xextent: 7;
            yextent: 13;
            hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height;
        }
        building {
            sprite: 1817;
            yoffset: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height;
        }
        building {
            sprite: 1775;
            xoffset: 8;
            yoffset: 7;
            xextent: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height;
        }

        building {
            sprite: 1760;
            xoffset: 2;
            yoffset: 2;
            xextent: 13;
            yextent: 13;
            hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) >= snowline_height;
        }
        building {
            sprite: 1719;
            xoffset: 8;
            yoffset: 2;
            xextent: 7;
            yextent: 13;
            hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) >= snowline_height;
        }
        building {
            sprite: 1760;
            yoffset: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) >= snowline_height;
        }
        building {
            sprite: 1719;
            xoffset: 8;
            yoffset: 7;
            xextent: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) >= snowline_height;
        }

        building {
            sprite: 1915;
            xoffset: 2;
            yoffset: 2;
            xextent: 13;
            yextent: 13;
            hide_sprite: climate != CLIMATE_TROPICAL || nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT;
        }
        building {
            sprite: 1923;
            xoffset: 8;
            yoffset: 2;
            xextent: 7;
            yextent: 13;
            hide_sprite: climate != CLIMATE_TROPICAL || nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT;
        }
        building {
            sprite: 1923;
            yoffset: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_TROPICAL || nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT;
        }
        building {
            sprite: 1915;
            xoffset: 8;
            yoffset: 7;
            xextent: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_TROPICAL || nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT;
        }

        building {
            sprite: 1845;
            xoffset: 2;
            yoffset: 2;
            xextent: 13;
            yextent: 13;
            hide_sprite: climate != CLIMATE_TROPICAL || (climate == CLIMATE_TROPICAL && nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT);
        }
        building {
            sprite: 1866;
            xoffset: 8;
            yoffset: 2;
            xextent: 7;
            yextent: 13;
            hide_sprite: climate != CLIMATE_TROPICAL || (climate == CLIMATE_TROPICAL && nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT);
        }
        building {
            sprite: 1845;
            yoffset: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_TROPICAL || (climate == CLIMATE_TROPICAL && nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT);
        }
        building {
            sprite: 1866;
            xoffset: 8;
            yoffset: 7;
            xextent: 7;
            yextent: 8;
            hide_sprite: climate != CLIMATE_TROPICAL || (climate == CLIMATE_TROPICAL && nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT);
        }
    }

    /* **************
     * tile_equipment
     * *************/

    spriteset(spriteset_crane, "src/graphics/industries/forest_1.png") { tmpl_building_sprite(10, 10, 78, -45) }
    spriteset(spriteset_bulldozer, "src/graphics/industries/forest_1.png") { tmpl_building_sprite(80, 10, 78, -45) }
    spriteset(spriteset_tracks_snowtile, "src/graphics/industries/forest_1.png") { tmpl_building_sprite(220, 10, 78, -45) }

    spritelayout ${industry.id}_tile_equipment_nonsnow_spritelayout {
        ground {
            sprite: 2022;
        }
        building {
            sprite: spriteset_crane;
            recolour_mode: RECOLOUR_REMAP;
            palette: 0;
            xextent: 7;
            yextent: 7;
            zextent: 7;
            always_draw: 1;
        }
        building {
            sprite: spriteset_bulldozer;
            recolour_mode: RECOLOUR_REMAP;
            palette: 0;
            xextent: 7;
            yextent: 7;
            zextent: 7;
            always_draw: 1;
        }
    }

    spritelayout ${industry.id}_tile_equipment_snow_spritelayout {
        ground {
            sprite: spriteset_tracks_snowtile;
            recolour_mode: RECOLOUR_REMAP;
            palette: 0;
        }
        building {
            sprite: spriteset_crane;
            recolour_mode: RECOLOUR_REMAP;
            palette: 0;
            xextent: 7;
            yextent: 7;
            zextent: 7;
            always_draw: 1;
        }
        building {
            sprite: spriteset_bulldozer;
            recolour_mode: RECOLOUR_REMAP;
            palette: 0;
            xextent: 7;
            yextent: 7;
            zextent: 7;
            always_draw: 1;
        }
    } <!--! note orphaned trailing bracket due to way spritelayouts_groundaware template is constructed -->
</tal:spritelayout>

<!--! !! this was a hax migration when removing CPP from tile location checks, as the spritelayouts chain was repurposing a
      tile location check switch with parameters.
      Not sure it's actually useful, snow sprite switching is handled in standardised spritelayout (or will be moved to a graphics chain switch)
      Think it's just a legacy artefact of CPP templating -->
<!--!  Check that the tile is within a certain height range (repurposeable for multiple checks, e.g. above or below snowline etc)
       uses more efficient code for (nearby_tile_height(0,0) <= maxh) && (nearby_tile_height(0,0) >= minh) -->
switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile_equipment_height_check, UCMP(nearby_tile_height(0, 0) - 0, snowline_height - 0)) {
    0..1: ${industry.id}_tile_equipment_nonsnow_spritelayout;
    ${industry.id}_tile_equipment_snow_spritelayout;
}

switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_tile_equipment_spritelayout, climate) {
	CLIMATE_ARCTIC: ${industry.id}_tile_equipment_height_check;
	${industry.id}_tile_equipment_nonsnow_spritelayout;
}

/* ****************************************************
 * Definition of the industry tiles and their callbacks
 * ***************************************************/

<tal:include define="location_checks_tile load: location_check_macros_tile.pynml"
             metal:use-macro="location_checks_tile.macros['render_tree']" />

item(FEAT_INDUSTRYTILES, tile_trees, ${global_constants.tile_numeric_ids['forest_tile_1']}) {
	property {
		substitute:       0;
		accepted_cargos:  [[FMSP, 8]];
		land_shape_flags: 0;
	}
	graphics {
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		autoslope:   return CB_RESULT_NO_AUTOSLOPE;
		tile_check: ${industry.id}_tile_1_lc_0;
		${industry.id}_tree_tile_layout;
	}
}

item(FEAT_INDUSTRYTILES, tile_equipment, ${global_constants.tile_numeric_ids['forest_tile_2']}) {
	property {
		substitute:       0;
		accepted_cargos:  [[FMSP, 8]];
		land_shape_flags: 0;
	}
	graphics {
		tile_check: ${industry.id}_tile_2_lc_0;
		${industry.id}_tile_equipment_spritelayout;
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_forest_1 {
	0, 0: tile_trees;
	0, 1: tile_trees;
	0, 2: tile_trees;
	1, 0: tile_trees;
	1, 1: tile_trees;
	1, 2: tile_trees;
	2, 1: tile_trees;
	2, 2: tile_equipment;
}

tilelayout tilelayout_forest_2 {
	0, 0: tile_trees;
	0, 1: tile_trees;
	0, 2: tile_trees;
	1, 0: tile_trees;
	1, 1: tile_trees;
	1, 2: tile_trees;
	3, 0: tile_trees;
	3, 1: tile_trees;
	3, 2: tile_equipment;
	4, 0: tile_trees;
	4, 1: tile_trees;
	4, 2: tile_trees;
}

tilelayout tilelayout_forest_3 {
	0, 1: tile_trees;
	0, 2: tile_trees;
	0, 3: tile_trees;
	1, 0: tile_trees;
	1, 1: tile_trees;
	1, 2: tile_trees;
	1, 3: tile_trees;
	1, 4: tile_trees;
	2, 0: tile_trees;
	2, 1: tile_trees;
	2, 2: tile_trees;
	2, 3: tile_trees;
	3, 0: tile_trees;
	3, 1: tile_trees;
	3, 2: tile_equipment;
	4, 0: tile_trees;
	4, 1: tile_trees;
	5, 0: tile_trees;
	5, 1: tile_trees;
	5, 2: tile_trees;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

<tal:include define="location_checks_industry load: location_check_macros_industry.pynml"
             metal:use-macro="location_checks_industry.macros['render_tree']" />

<tal:include metal:use-macro="load: extra_text_primary.pynml" />

<tal:include metal:use-macro="load: produce_primary.pypnml" />
<tal:include metal:use-macro="load: check_primary_supplies_delivered.pypnml" />

<tal:include metal:use-macro="load: availability.pynml" />

<tal:include metal:use-macro="load: properties_industry.pynml" />

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
	graphics {
		produce_cargo_arrival:   ${industry.id}_produce;
		construction_probability:${industry.id}_check_availability;
		location_check:          ${industry.id}_check_location;
		produce_256_ticks:       ${industry.id}_produce_256_ticks;
		monthly_prod_change:     ${industry.id}_monthly_update;
        random_prod_change:      return CB_RESULT_IND_PROD_NO_CHANGE;
		build_prod_change:       randomise_primary_production_on_build;
		extra_text_fund:         return string(STR_FUND_FOREST);
		extra_text_industry:     ${industry.id}_extra_text;
		colour:                  switch_colour;
	}
}