<!--!
  This file is part of FIRS Industry Set for OpenTTD.
  FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
  FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
-->

<tal:extra_graphics_switches repeat="graphics_switch industry.extra_graphics_switches">
    <!--! if more extra graphics switch types are added, this would need conditional tal wrapped around each type -->
    switch(FEAT_INDUSTRYTILES, SELF, ${graphics_switch.id}, nearby_tile_slope(0,0)) {
        <tal:slope_spritelayout_mapping repeat="slope_spritelayout graphics_switch.slope_spritelayout_mapping.items()">
            ${slope_spritelayout[0]}: ${slope_spritelayout[1]};
        </tal:slope_spritelayout_mapping>
        ${graphics_switch.default_result};
    }
</tal:extra_graphics_switches>

<!--! standard switches -->

<!--!<tal:spritelayout_switches repeat="spritelayout python:industry.spritelayouts">
    switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_spritelayout_switch_${spritelayout.id}, 0) {
        ${spritelayout.id};
    }
</tal:spritelayout_switches>-->

<tal:industry_layouts_graphic_switches repeat="industry_layout python:industry.industry_layouts">
    switch(FEAT_INDUSTRYTILES, SELF, ${industry_layout.id}_graphics_switch, relative_pos) {
        <tal:build_industry_layout repeat="layout industry_layout.layout">
            <!--!relative_coord(${layout[0]}, ${layout[1]}): ${industry.id}_spritelayout_switch_${layout[3]};-->
            relative_coord(${layout[0]}, ${layout[1]}): ${industry.unpack_switch_or_spritelayout(layout[3])};
        </tal:build_industry_layout>
        ${industry.unpack_switch_or_spritelayout(industry_layout.layout[0][3])}; // a default is needed, but should never be reached, layout definitions are explicit
    }
</tal:industry_layouts_graphic_switches>

switch(FEAT_INDUSTRYTILES, PARENT, ${industry.id}_industry_graphics_switch_layouts, layout_num) {
    <tal:available_industry_layouts repeat="layout_num range(len(industry.industry_layouts))">
	    ${layout_num+1}: ${industry.industry_layouts[layout_num].id}_graphics_switch;
	</tal:available_industry_layouts>
	${industry.industry_layouts[0].id}_graphics_switch; // default
}

switch(FEAT_INDUSTRYTILES, SELF, ${industry.id}_industry_construction_state_graphics_switch, construction_state) {
	0..2: ${industry.get_switch_name_for_construction_states()};
	${industry.id}_industry_graphics_switch_layouts; // default
}

switch(FEAT_INDUSTRYTILES, PARENT, ${industry.id}_industry_master_graphics_switch, STORE_TEMP(random_bits, 0)) {
	${industry.id}_industry_construction_state_graphics_switch; // default
}

<!--! at time of writing this comment, it was easier to leave the CPP varact 2 chain untouched for fences -->

FENCES_EXCLUDE_BY_CLASS     ( ${industry.id}_tile_fence_station,  ${industry.id}_industry_master_graphics_switch,   TILE_CLASS_STATION)
FENCES_EXCLUDE_SAME_INDUSTRY( ${industry.id}_tile_fence_industry, ${industry.id}_tile_fence_station)
ADD_FLAT_FENCES             ( ${industry.id}_tile_fences,         ${industry.id}_tile_fence_industry, 1, 1, 1, 1)
