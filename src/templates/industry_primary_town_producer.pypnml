/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

<tal:include metal:use-macro="load: spritesets.pynml" />

<tal:include metal:use-macro="load: spritelayouts.pynml" />

<tal:include metal:use-macro="load: graphics_switches.pynml" />


/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

CHECK_HOUSES_NEARBY     (tile_houses_15, -4, -4, return CB_RESULT_LOCATION_DISALLOW)
CHECK_HOUSES_NEARBY     (tile_houses_14, -4, 4, ${industry.id}_tile_houses_15)
CHECK_HOUSES_NEARBY     (tile_houses_13, 4, -4, ${industry.id}_tile_houses_14)
CHECK_HOUSES_NEARBY     (tile_houses_12, 4, 4, ${industry.id}_tile_houses_13)
CHECK_HOUSES_NEARBY     (tile_houses_11, -3, -3, ${industry.id}_tile_houses_12)
CHECK_HOUSES_NEARBY     (tile_houses_10, -3, 3, ${industry.id}_tile_houses_11)
CHECK_HOUSES_NEARBY     (tile_houses_9, 3, -3, ${industry.id}_tile_houses_10)
CHECK_HOUSES_NEARBY     (tile_houses_8, 3, 3, ${industry.id}_tile_houses_9)
CHECK_HOUSES_NEARBY     (tile_houses_7, -2, 2, ${industry.id}_tile_houses_8)
CHECK_HOUSES_NEARBY     (tile_houses_6, 2, -2, ${industry.id}_tile_houses_7)
CHECK_HOUSES_NEARBY     (tile_houses_5, 2, 2,  ${industry.id}_tile_houses_6)
CHECK_HOUSES_NEARBY     (tile_houses_4, -3, 0, ${industry.id}_tile_houses_5)
CHECK_HOUSES_NEARBY     (tile_houses_3, 0, -3, ${industry.id}_tile_houses_4)
CHECK_HOUSES_NEARBY     (tile_houses_2, 3, 0,  ${industry.id}_tile_houses_3)
CHECK_HOUSES_NEARBY     (tile_houses_1, 0, 3, ${industry.id}_tile_houses_2)
TILE_DISALLOW_NEARBY_CLASS(tile_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_tile_houses_1)
TILE_ALLOW_PLAYER         (tile_location_check, ${industry.id}_tile_nearby_industry)

<!--! this repeat is hax whilst refactoring CPP stuff out
      it should be possible to just use the standard tile properties template,
      but the industry needs configured correctly to do that, which is not in scope for the CPP removal work
-->
<tal:tiles repeat="tile industry.tiles">
    item(FEAT_INDUSTRYTILES, ${tile.id}, ${tile.numeric_id}) {
        property {
            substitute:       0;
            accepted_cargos:  [];
            land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
        }
        graphics {
            tile_check: ${industry.id}_tile_location_check;
            ${industry.id}_tile_fences;
        }
    }
</tal:tiles>

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

<tal:include metal:use-macro="load: layouts.pynml" />

/* *************************************************
 * Definition of the industry
 * *************************************************/

<tal:include define="location_checks_industry load: location_check_macros_industry.pynml"
             metal:use-macro="location_checks_industry.macros['render_tree']" />

<tal:include metal:use-macro="load: availability.pynml" />

/* We have a special production code here:
 * Production depends on the town population: population / 12 is output
 */
produce(${industry.id}_production,
		waiting_cargo_1, // should be 0
		waiting_cargo_2, // should be 0
		waiting_cargo_3, // should be 0
		LOAD_TEMP(1),    // we stored output here
		0,               // no 2nd output
		0                // don't repeat
		);


switch(FEAT_INDUSTRIES, PARENT, ${industry.id}_produce, [STORE_TEMP(((population + 11) / (12 * 7)), 1)]) {
	0: ${industry.id}_production;
	${industry.id}_production;
}


<tal:include metal:use-macro="load: properties_industry.pynml" />

<!--! graphics block defined explicitly per industry subclass, to avoid too much fiddly conditional stuff -->
<tal:build_economies repeat="economy economies">
    if (economy==${economy.numeric_id}) {
        <tal:industry_on_or_off condition="industry.get_property('enabled', economy) == True">
            item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
                graphics {
                    produce_256_ticks:       ${industry.id}_produce;
                    construction_probability:${industry.id}_check_availability;
                    location_check:          ${industry.id}_check_location;
                    monthly_prod_change:     CB_RESULT_IND_PROD_NO_CHANGE;
                    random_prod_change:      CB_RESULT_IND_PROD_NO_CHANGE;
                    extra_text_fund:          ${industry.get_extra_text_fund(economy)};
                    extra_text_industry:     return string(STR_EXTRA_RECYCLING_DEPOT);
                    colour:                  switch_colour;
                }
            }
        </tal:industry_on_or_off>
    }
</tal:build_economies>

#include "../src/templates/undefs.pnml"
