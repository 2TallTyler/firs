/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

<tal:include metal:use-macro="load: spritesets.pynml" />

<tal:include metal:use-macro="load: spritelayouts.pynml" />

<tal:include metal:use-macro="load: layout_graphics_switches.pynml" />

<tal:include metal:use-macro="load: fence_switches.pynml" />

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

CHECK_HOUSES_NEARBY     (tile_houses_15, -4, -4, return CB_RESULT_LOCATION_DISALLOW)
CHECK_HOUSES_NEARBY     (tile_houses_14, -4, 4, ${industry.id}_tile_houses_15)
CHECK_HOUSES_NEARBY     (tile_houses_13, 4, -4, ${industry.id}_tile_houses_14)
CHECK_HOUSES_NEARBY     (tile_houses_12, 4, 4, ${industry.id}_tile_houses_13)
CHECK_HOUSES_NEARBY     (tile_houses_11, -3, -3, ${industry.id}_tile_houses_12)
CHECK_HOUSES_NEARBY     (tile_houses_10, -3, 3, ${industry.id}_tile_houses_11)
CHECK_HOUSES_NEARBY     (tile_houses_9, 3, -3, ${industry.id}_tile_houses_10)
CHECK_HOUSES_NEARBY     (tile_houses_8, 3, 3, ${industry.id}_tile_houses_9)
CHECK_HOUSES_NEARBY     (tile_houses_7, -2, 2, ${industry.id}_tile_houses_8)
CHECK_HOUSES_NEARBY     (tile_houses_6, 2, -2, ${industry.id}_tile_houses_7)
CHECK_HOUSES_NEARBY     (tile_houses_5, 2, 2,  ${industry.id}_tile_houses_6)
CHECK_HOUSES_NEARBY     (tile_houses_4, -3, 0, ${industry.id}_tile_houses_5)
CHECK_HOUSES_NEARBY     (tile_houses_3, 0, -3, ${industry.id}_tile_houses_4)
CHECK_HOUSES_NEARBY     (tile_houses_2, 3, 0,  ${industry.id}_tile_houses_3)
CHECK_HOUSES_NEARBY     (tile_houses_1, 0, 3, ${industry.id}_tile_houses_2)
TILE_DISALLOW_NEARBY_CLASS(tile_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_tile_houses_1)
TILE_ALLOW_PLAYER         (tile_location_check, ${industry.id}_tile_nearby_industry)

item(FEAT_INDUSTRYTILES, ${industry.id}_tile, TILE_RECYCLINGDEPOT_1) {
	property {
		substitute:       0;
		accepted_cargos:  [];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
	graphics {
		tile_check: ${industry.id}_tile_location_check;
		${industry.id}_tile_fences;
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

<tal:include metal:use-macro="load: industry_layouts.pynml" />

/* *************************************************
 * Definition of the industry
 * *************************************************/

CHECK_INCOMPATIBLE  (recycling_plant, 16, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (recycling_depot, 20, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_recycling_plant)
CHECK_INDUSTRY_TOWN_COUNT   (check_location, recycling_depot, 0, 0, string(STR_ERR_LOCATION_LIMIT_1_PER_TOWN), ${industry.id}_recycling_depot)
/* Don't use founder check for this industry, there is a hard limit of 1 per town irrespective of funding type */

<tal:include metal:use-macro="load: check_availability.pynml" />

/* We have a special production code here:
 * Production depends on the town population: population / 12 is output
 */
produce(${industry.id}_production,
		waiting_cargo_1, // should be 0
		waiting_cargo_2, // should be 0
		waiting_cargo_3, // should be 0
		LOAD_TEMP(1),    // we stored output here
		0,               // no 2nd output
		0                // don't repeat
		);


switch(FEAT_INDUSTRIES, PARENT, ${industry.id}_produce, [STORE_TEMP(((population + 11) / (12 * 7)), 1)]) {
	0: ${industry.id}_production;
	${industry.id}_production;
}


${industry.get_industry_properties()}

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
	graphics {
		produce_256_ticks:       ${industry.id}_produce;
		construction_probability:${industry.id}_check_availability;
		location_check:          ${industry.id}_check_location;
		monthly_prod_change:     CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change:      CB_RESULT_IND_PROD_NO_CHANGE;
		extra_text_industry:     return string(STR_EXTRA_RECYCLING_DEPOT);
		extra_text_fund:         return string(STR_FUND_AVAILABLE_FROM, ${industry.intro_year});
		colour:                  switch_colour;
	}
}

#include "../../src/templates/undefs.pnml"
