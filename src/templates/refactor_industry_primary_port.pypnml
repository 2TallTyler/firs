/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

<tal:include metal:use-macro="load: spritesets.pynml" />

<tal:include metal:use-macro="load: spritelayouts.pynml" />

<tal:include metal:use-macro="load: graphics_switches.pynml" />

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* It must not be a flat tile */
TILE_CHECK_FLAT      (tile2_flat_check, return CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)

/* We allow on sea shores and on normal slopes - but not rivers and canals */
TILE_CHECK_WATERCLASS(tile2_land_check,     WATER_CLASS_NONE, ${industry.id}_tile2_flat_check, return CB_RESULT_LOCATION_DISALLOW)
TILE_CHECK_WATERCLASS(tile2_location_check, WATER_CLASS_SEA,  ${industry.id}_tile2_flat_check, ${industry.id}_tile2_land_check)

<tal:build_economies repeat="economy economies">
    if (economy==${repeat.economy.index}) {
        <tal:industry_on_or_off condition="industry.get_property('enabled', economy) == True">
        item(FEAT_INDUSTRYTILES, ${industry.id}_tile_1, ${global_constants.tile_numeric_ids[industry.id + '_tile_1']}) {
            property {
                substitute:       0;
                land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
                <!--! don't use declaration magic for these props that use lists -->
                accepted_cargos: [${','.join(['['+ i +', 8]' for i in industry.get_property('accept_cargo_types', economy)])}];
            }
        }
        item(FEAT_INDUSTRYTILES, ${industry.id}_tile_2, ${global_constants.tile_numeric_ids[industry.id + '_tile_2']}) {
            property {
                substitute:       0;
                land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
                <!--! don't use declaration magic for these props that use lists -->
                accepted_cargos: [${','.join(['['+ i +', 8]' for i in industry.get_property('accept_cargo_types', economy)])}];
            }
        }
        </tal:industry_on_or_off>
    }
</tal:build_economies>


item(FEAT_INDUSTRYTILES, ${industry.id}_tile_1, ${global_constants.tile_numeric_ids[industry.id + '_tile_1']}) {
	graphics {
		${industry.id}_tile_fences;
	}
}
item(FEAT_INDUSTRYTILES, ${industry.id}_tile_2, ${global_constants.tile_numeric_ids[industry.id + '_tile_2']}) {
	graphics {
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check:  ${industry.id}_tile2_location_check;
		${industry.id}_tile_fences;
	}
}
/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

<tal:include metal:use-macro="load: industry_layouts.pynml" />

/* *************************************************
 * Definition of the industry
 * *************************************************/

<tal:include metal:use-macro="load: extra_text_primary.pynml" />

<tal:include metal:use-macro="load: primary_supplies_stuff.pynml" />

<tal:include metal:use-macro="load: check_availability.pynml" />

<tal:include metal:use-macro="load: industry_location_checks.pynml" />

<tal:include metal:use-macro="load: industry_properties.pynml" />

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
	graphics {
        produce_cargo_arrival:   ${industry.id}_produce;
        produce_256_ticks:       ${industry.id}_produce_256_ticks;
        construction_probability:${industry.id}_check_availability;
        location_check:          ${industry.id}_check_location;
        monthly_prod_change:     ${industry.id}_monthly_update;
        random_prod_change:      return CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change:       randomise_primary_production_on_build;
        extra_text_industry:     ${industry.id}_extra_text;
		colour:                  switch_colour;
	}
}

#include "../../src/templates/undefs.pnml"
