/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

spriteset(THIS_ID(spriteset_ground), "src/graphics/industries/groundtiles.png") {
	tmpl_ground_tile(150, 10)
	tmpl_ground_tile(150, 10)
}

spriteset(THIS_ID(spriteset_1)) {
	tmpl_building_sprite_filename(10, 60, 70, -39, "src/graphics/industries/metal_workshop.png")
	tmpl_building_sprite_filename(10, 60, 70, -39, "src/graphics/industries/metal_workshop_snow.png")
}

spriteset(THIS_ID(spriteset_2)) {
	tmpl_building_sprite_filename(80, 60, 70, -39, "src/graphics/industries/metal_workshop.png")
	tmpl_building_sprite_filename(80, 60, 70, -39, "src/graphics/industries/metal_workshop_snow.png")
}

spriteset(THIS_ID(spriteset_3)) {
	tmpl_building_sprite_filename(150, 60, 51, -20, "src/graphics/industries/metal_workshop.png")
	tmpl_building_sprite_filename(150, 60, 51, -20, "src/graphics/industries/metal_workshop_snow.png")
}

spriteset(THIS_ID(spriteset_4)) {
	tmpl_building_sprite_filename(220, 60, 51, -20, "src/graphics/industries/metal_workshop.png")
	tmpl_building_sprite_filename(220, 60, 51, -20, "src/graphics/industries/metal_workshop_snow.png")
}

spriteset(THIS_ID(spriteset_5)) {
	tmpl_building_sprite_filename(290, 60, 51, -20, "src/graphics/industries/metal_workshop.png")
	tmpl_building_sprite_filename(290, 60, 51, -20, "src/graphics/industries/metal_workshop_snow.png")
}

spriteset(THIS_ID(spriteset_6)) {
	tmpl_building_sprite_filename(360, 60, 31, 0, "src/graphics/industries/metal_workshop.png")
	tmpl_building_sprite_filename(360, 60, 31, 0, "src/graphics/industries/metal_workshop_snow.png")
}

spriteset(THIS_ID(spriteset_7)) {
	tmpl_building_sprite_filename(430, 60, 31, 0, "src/graphics/industries/metal_workshop.png")
	tmpl_building_sprite_filename(430, 60, 31, 0, "src/graphics/industries/metal_workshop_snow.png")
}

SPRITELAYOUT_NORMAL_SNOW(THIS_ID(spritelayout_2), THIS_ID(spriteset_ground), THIS_ID(spriteset_ground), THIS_ID(spriteset_2), 32)

SPRITELAYOUT_NORMAL_SNOW(THIS_ID(spritelayout_3), THIS_ID(spriteset_ground), THIS_ID(spriteset_ground), THIS_ID(spriteset_3), 32)

SPRITELAYOUT_NORMAL_SNOW(THIS_ID(spritelayout_4), THIS_ID(spriteset_ground), THIS_ID(spriteset_ground), THIS_ID(spriteset_4), 32)

SPRITELAYOUT_NORMAL_SNOW(THIS_ID(spritelayout_5), THIS_ID(spriteset_ground), THIS_ID(spriteset_ground), THIS_ID(spriteset_5), 32)

SPRITELAYOUT_NORMAL_SNOW(THIS_ID(spritelayout_6), THIS_ID(spriteset_ground), THIS_ID(spriteset_ground), THIS_ID(spriteset_6), 32)

SPRITELAYOUT_NORMAL_SNOW(THIS_ID(spritelayout_7), THIS_ID(spriteset_ground), THIS_ID(spriteset_ground), THIS_ID(spriteset_7), 32)

SPRITELAYOUT_NORMAL_SNOW_BEGIN(THIS_ID(spritelayout_1_anim), THIS_ID(spriteset_ground), THIS_ID(spriteset_ground), THIS_ID(spriteset_1), 7)
	BUILDING_DARK_SMOKE_SMALL(0, 8, 53)
SPRITELAYOUT_END

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_1), relative_pos) {
	relative_coord(0, 0): THIS_ID(spritelayout_3);
	relative_coord(2, 0): THIS_ID(spritelayout_3);
	relative_coord(0, 1): THIS_ID(spritelayout_3);
	relative_coord(1, 1): THIS_ID(spritelayout_3);
	relative_coord(1, 0): THIS_ID(spritelayout_3);
	relative_coord(0, 3): THIS_ID(spritelayout_4);
	relative_coord(1, 3): THIS_ID(spritelayout_4);
	relative_coord(1, 4): THIS_ID(spritelayout_6);
	relative_coord(2, 1): THIS_ID(spritelayout_1_anim);
	relative_coord(2, 2): THIS_ID(spritelayout_2);
	relative_coord(2, 3): THIS_ID(spritelayout_7);
	relative_coord(2, 4): THIS_ID(spritelayout_7);
	THIS_ID(spritelayout_5);
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_2), relative_pos) {
	relative_coord(1, 0): THIS_ID(spritelayout_1_anim);
	relative_coord(1, 1): THIS_ID(spritelayout_2);
	relative_coord(0, 2): THIS_ID(spritelayout_3);
	relative_coord(1, 2): THIS_ID(spritelayout_3);
	relative_coord(1, 3): THIS_ID(spritelayout_3);
	relative_coord(2, 1): THIS_ID(spritelayout_7);
	relative_coord(2, 2): THIS_ID(spritelayout_6);
	relative_coord(2, 3): THIS_ID(spritelayout_6);
	relative_coord(2, 0): THIS_ID(spritelayout_4);
	relative_coord(3, 0): THIS_ID(spritelayout_4);
	relative_coord(3, 2): THIS_ID(spritelayout_4);
	relative_coord(0, 3): THIS_ID(spritelayout_3);
	relative_coord(3, 3): THIS_ID(spritelayout_3);
	THIS_ID(spritelayout_5);
}

switch(FEAT_INDUSTRYTILES, PARENT, THIS_ID(layout), layout_num) {
	1: THIS_ID(layout_1);
	2: THIS_ID(layout_2);
	THIS_ID(layout_1);
}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

TILE_DISALLOW_NEARBY_CLASS(tile1_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile1_player_check,                                                            THIS_ID(tile1_nearby_industry))
TILE_DISALLOW_SLOPES      (tile1_location_check,                       CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile1_player_check))

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_METALWORKSHOP_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[STEL, 8],[RFPR, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
		animation_info:   [ANIMATION_LOOPING, 47];
		animation_speed:  2;
	}

	graphics {
		tile_check:  THIS_ID(tile1_location_check);
		THIS_ID(layout);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_metal_foundry_1 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	0, 2: THIS_ID(tile);
	0, 3: THIS_ID(tile);
	0, 4: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	1, 2: THIS_ID(tile);
	1, 3: THIS_ID(tile);
	2, 0: THIS_ID(tile);
	2, 1: THIS_ID(tile);
	2, 2: THIS_ID(tile);
	1, 4: THIS_ID(tile);
	2, 3: THIS_ID(tile);
	2, 4: THIS_ID(tile);
}

tilelayout tilelayout_metal_foundry_2 {
	0, 2: THIS_ID(tile);
	0, 3: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	1, 2: THIS_ID(tile);
	1, 3: THIS_ID(tile);
	2, 0: THIS_ID(tile);
	2, 3: THIS_ID(tile);
	3, 0: THIS_ID(tile);
	3, 1: THIS_ID(tile);
	3, 2: THIS_ID(tile);
	3, 3: THIS_ID(tile);
	2, 1: THIS_ID(tile);
	2, 2: THIS_ID(tile);
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
#define THIS_NUM_OUTPUT_CARGOS    2
#define THIS_PROD_RATIO_CARGO1    6
#define THIS_PROD_RATIO_CARGO2    2
#define THIS_PROD_RATIO_CARGO3    0
#define THIS_BOOST_12             6
#define THIS_BOOST_13             2
#define THIS_BOOST_21             0
#define THIS_BOOST_23             0
#define THIS_BOOST_31             0
#define THIS_BOOST_32             0
/* extra text template */
#define THIS_STR_EXTRA_TEXT       STR_EXTRA_METAL_FOUNDRY
#define THIS_STR_DEBUG_TEXT       STR_EXTRA_TEXT_DEBUG_SECONDARY
/* availability years - also update available from strings if changing these */
#define THIS_MIN_YEAR 1762


CHECK_INCOMPATIBLE(metal_workshop, 56, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_FOUNDER     (THIS_ID(metal_workshop))

SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

#include "../src/nml/templates/produce_secondary.pnml"
#include "../src/nml/templates/check_secondary_production_level.pnml"
#include "../src/nml/templates/check_secondary_closure.pnml"

#include "../src/nml/templates/extra_text_secondary.pnml"

#include "../src/nml/templates/check_availability.pnml"

${industry.get_industry_properties()}

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		construction_probability:THIS_ID(check_availability);
		location_check:          THIS_ID(check_location);
		monthly_prod_change:     THIS_ID(check_production_level);
		random_prod_change:      THIS_ID(check_closure);
		extra_text_industry:     THIS_ID(extra_text);
		extra_text_fund:         return string(STR_FUND_AVAILABLE_FROM, THIS_MIN_YEAR);
		colour:                  THIS_ID(colour);
	}
}

#include "../src/nml/templates/undefs.pnml"
