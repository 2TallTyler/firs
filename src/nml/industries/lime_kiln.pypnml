/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */

#include "../src/nml/templates/spritelayout_templates.pnml"

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

spriteset(THIS_ID(spriteset_ground)) {
	tmpl_building_sprite_filename(360, 10, 64, -33, "src/graphics/industries/lime_kiln.png")
	tmpl_building_sprite_filename(360, 10, 64, -33, "src/graphics/industries/lime_kiln_snow.png")
}

spriteset(THIS_ID(spriteset_1)) {
	tmpl_building_sprite_filename(10, 10, 110, -70, "src/graphics/industries/lime_kiln.png")
	tmpl_building_sprite_filename(10, 10, 110, -70, "src/graphics/industries/lime_kiln_snow.png")
}

spriteset(THIS_ID(spriteset_2)) {
	tmpl_building_sprite_filename(80, 10, 110, -70, "src/graphics/industries/lime_kiln.png")
	tmpl_building_sprite_filename(80, 10, 110, -70, "src/graphics/industries/lime_kiln_snow.png")
}

spriteset(THIS_ID(spriteset_3)) {
	tmpl_building_sprite_filename(150, 10, 64, -31, "src/graphics/industries/lime_kiln.png")
	tmpl_building_sprite_filename(150, 10, 64, -31, "src/graphics/industries/lime_kiln_snow.png")
}

spriteset(THIS_ID(spriteset_4)) {
	tmpl_building_sprite_filename(220, 10, 92, -60, "src/graphics/industries/lime_kiln.png")
	tmpl_building_sprite_filename(220, 10, 92, -60, "src/graphics/industries/lime_kiln_snow.png")
}

spriteset(THIS_ID(spriteset_5)) {
	tmpl_building_sprite_filename(290, 10, 64, -31, "src/graphics/industries/lime_kiln.png")
	tmpl_building_sprite_filename(290, 10, 64, -31, "src/graphics/industries/lime_kiln_snow.png")
}

SPRITELAYOUT_FENCES_NORMAL_SNOW(THIS_ID(spritelayout_1), 2022, THIS_ID(spriteset_ground), THIS_ID(spriteset_1), 48)

SPRITELAYOUT_FENCES_NORMAL_SNOW(THIS_ID(spritelayout_2), 2022, THIS_ID(spriteset_ground), THIS_ID(spriteset_2), 48)

SPRITELAYOUT_FENCES_NORMAL_SNOW(THIS_ID(spritelayout_3), 2022, THIS_ID(spriteset_ground), THIS_ID(spriteset_3), 48)

SPRITELAYOUT_FENCES_NORMAL_SNOW(THIS_ID(spritelayout_4), 2022, THIS_ID(spriteset_ground), THIS_ID(spriteset_4), 48)

SPRITELAYOUT_FENCES_NORMAL_SNOW(THIS_ID(spritelayout_5), 2022, THIS_ID(spriteset_ground), THIS_ID(spriteset_5), 48)

spritelayout THIS_ID(spritelayout_6) {
	ground {
		sprite: 2022;
	}

	childsprite {
		sprite: THIS_ID(spriteset_ground);
		recolour_mode: RECOLOUR_REMAP;
		palette: PALETTE_USE_DEFAULT;
		hide_sprite: terrain_type != TILETYPE_SNOW;
		always_draw: 1;
	}
	FENCE_NE
	FENCE_NW
	FENCE_SE
	FENCE_SW
}

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(layout_1), relative_pos) {
	relative_coord(0, 0): THIS_ID(spritelayout_2);
	relative_coord(0, 1): THIS_ID(spritelayout_1);
	relative_coord(1, 0): THIS_ID(spritelayout_4);
	relative_coord(1, 1): THIS_ID(spritelayout_5);
	relative_coord(1, 2): THIS_ID(spritelayout_3);
	THIS_ID(spritelayout_6);
}

switch(FEAT_INDUSTRYTILES, PARENT, THIS_ID(tile1_spritelayout), layout_num) {
	THIS_ID(layout_1);
}

FENCES_EXCLUDE_BY_CLASS     ( THIS_ID(tile_fence_station),  THIS_ID(tile1_spritelayout),  TILE_CLASS_STATION)
FENCES_EXCLUDE_SAME_INDUSTRY( THIS_ID(tile_fence_industry), THIS_ID(tile_fence_station))
ADD_FLAT_FENCES             ( THIS_ID(tile_fences),         THIS_ID(tile_fence_industry), 1, 1, 1, 1)

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

TILE_DISALLOW_NEARBY_CLASS(nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (player_check,                                                            THIS_ID(nearby_industry))
TILE_DISALLOW_SLOPES      (location_check,                       CB_RESULT_LOCATION_DISALLOW, THIS_ID(player_check))

item(FEAT_INDUSTRYTILES, THIS_ID(tile), TILE_LIMEKILN_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[GRVL, 8], [COAL, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}

	graphics {
		tile_check:   THIS_ID(location_check);
		THIS_ID(tile_fences);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_lime_kiln_1 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	0, 2: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	1, 2: THIS_ID(tile);
}

tilelayout tilelayout_lime_kiln_2 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	2, 0: THIS_ID(tile);
	2, 1: THIS_ID(tile);
}

tilelayout tilelayout_lime_kiln_3 {
	0, 0: THIS_ID(tile);
	0, 1: THIS_ID(tile);
	0, 2: THIS_ID(tile);
	0, 3: THIS_ID(tile);
	1, 0: THIS_ID(tile);
	1, 1: THIS_ID(tile);
	1, 2: THIS_ID(tile);
	1, 3: THIS_ID(tile);
}


/* *************************************************
 * Definition of the industry
 * *************************************************/

/* for secondary production template */
#define THIS_NUM_OUTPUT_CARGOS    2
#define THIS_PROD_RATIO_CARGO1    3
#define THIS_PROD_RATIO_CARGO2    3
#define THIS_PROD_RATIO_CARGO3    0
#define THIS_BOOST_12             4
#define THIS_BOOST_13             0
#define THIS_BOOST_21             4
#define THIS_BOOST_23             0
#define THIS_BOOST_31             0
#define THIS_BOOST_32             0
/* extra text template */
#define THIS_STR_EXTRA_TEXT       STR_EXTRA_LIME_KILN
#define THIS_STR_DEBUG_TEXT       STR_EXTRA_TEXT_DEBUG_SECONDARY


CHECK_INCOMPATIBLE(lime_kiln, 56, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE(coal_mine, 16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(lime_kiln))
CHECK_INCOMPATIBLE(quarry,    16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(coal_mine))
CHECK_FOUNDER     (THIS_ID(quarry))

SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

#include "../src/nml/templates/produce_secondary.pnml"
#include "../src/nml/templates/check_secondary_production_level.pnml"
#include "../src/nml/templates/check_secondary_closure.pnml"

#include "../src/nml/templates/extra_text_secondary.pnml"

#include "../src/nml/templates/check_availability.pnml"

${industry.get_industry_properties()}

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		construction_probability:THIS_ID(check_availability);
		location_check:          THIS_ID(check_location);
		monthly_prod_change:     THIS_ID(check_production_level);
		random_prod_change:      THIS_ID(check_closure);
		extra_text_industry:     THIS_ID(extra_text);
		colour:                  THIS_ID(colour);
	}
}

#include "../src/nml/templates/undefs.pnml"
