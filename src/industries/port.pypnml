/*
 * This file is part of FIRS Industry Set for OpenTTD.
 * FIRS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS. If not, see <http://www.gnu.org/licenses/>.
 */


#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

${industry.get_spritesets()}

${industry.get_spritelayouts()}

switch(FEAT_INDUSTRYTILES, SELF, port_slope_switch_1, nearby_tile_slope(0,0)) {
	0: ${industry.id}_spritelayout_10;
	1: ${industry.id}_spritelayout_4;
	2: ${industry.id}_spritelayout_8;
	3: ${industry.id}_spritelayout_9;
	4: ${industry.id}_spritelayout_6;
	5: ${industry.id}_spritelayout_5;
	6: ${industry.id}_spritelayout_7;
	7: ${industry.id}_spritelayout_10;
	8: ${industry.id}_spritelayout_3;
	9: ${industry.id}_spritelayout_4;
	10: ${industry.id}_spritelayout_8;
	11: ${industry.id}_spritelayout_9;
	12: ${industry.id}_spritelayout_6;
	13: ${industry.id}_spritelayout_5;
	14: ${industry.id}_spritelayout_7;
	${industry.id}_spritelayout_10;
}

switch(FEAT_INDUSTRYTILES, SELF, port_slope_switch_2, nearby_tile_slope(0,0)) {
	0: ${industry.id}_spritelayout_20;
	1: ${industry.id}_spritelayout_14;
	2: ${industry.id}_spritelayout_18;
	3: ${industry.id}_spritelayout_19;
	4: ${industry.id}_spritelayout_16;
	5: ${industry.id}_spritelayout_15;
	6: ${industry.id}_spritelayout_17;
	7: ${industry.id}_spritelayout_20;
	8: ${industry.id}_spritelayout_13;
	9: ${industry.id}_spritelayout_14;
	10: ${industry.id}_spritelayout_18;
	11: ${industry.id}_spritelayout_19;
	12: ${industry.id}_spritelayout_16;
	13: ${industry.id}_spritelayout_15;
	14: ${industry.id}_spritelayout_17;
	${industry.id}_spritelayout_20;
}

${industry.get_industry_layouts_as_graphic_switches()}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

/* It must not be a flat tile */
TILE_CHECK_FLAT      (tile2_flat_check, return CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)

/* We allow on sea shores and on normal slopes - but not rivers and canals */
TILE_CHECK_WATERCLASS(tile2_land_check,     WATER_CLASS_NONE, ${industry.id}_tile2_flat_check, return CB_RESULT_LOCATION_DISALLOW)
TILE_CHECK_WATERCLASS(tile2_location_check, WATER_CLASS_SEA,  ${industry.id}_tile2_flat_check, ${industry.id}_tile2_land_check)

<tal:build_economies repeat="economy global_constants.economies">
    if (economy==${repeat.economy.index}) {
        <tal:industry_on_or_off condition="industry.get_property('enabled', economy) == True">
        item(FEAT_INDUSTRYTILES, ${industry.id}_tile_1, TILE_PORT_1) {
            property {
                substitute:       0;
                land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
                <!--! don't use declaration magic for these props that use lists -->
                accepted_cargos: [${','.join(['['+ i +', 8]' for i in industry.get_property('accept_cargo_types', economy)])}];
            }
        }
        item(FEAT_INDUSTRYTILES, ${industry.id}_tile_2, TILE_PORT_2) {
            property {
                substitute:       0;
                land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
                <!--! don't use declaration magic for these props that use lists -->
                accepted_cargos: [${','.join(['['+ i +', 8]' for i in industry.get_property('accept_cargo_types', economy)])}];
            }
        }
        </tal:industry_on_or_off>
    }
</tal:build_economies>


item(FEAT_INDUSTRYTILES, ${industry.id}_tile_1, TILE_PORT_1) {
	graphics {
		${industry.id}_industry_master_graphics_switch;
	}
}
item(FEAT_INDUSTRYTILES, ${industry.id}_tile_2, TILE_PORT_2) {
	graphics {
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		tile_check:  ${industry.id}_tile2_location_check;
		${industry.id}_industry_master_graphics_switch;
	}
}
/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

${industry.get_industry_layouts_as_tilelayouts()}

/* *************************************************
 * Definition of the industry
 * *************************************************/

${industry.get_primary_supplies_stuff()}

#include "../src/templates/produce_primary.pnml"
#include "../src/templates/check_primary_production_level.pnml"

#include "../src/templates/check_availability.pnml"

CHECK_INCOMPATIBLE  (port, 48, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_FOUNDER       (${industry.id}_port)

SWITCH_COLOUR_SCHEME1(${industry.id}_colour)

${industry.get_industry_properties()}

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
	graphics {
        produce_cargo_arrival:   ${industry.id}_produce;
        produce_256_ticks:       ${industry.id}_produce_256_ticks;
        construction_probability:${industry.id}_check_availability;
        location_check:          ${industry.id}_check_location;
        monthly_prod_change:     ${industry.id}_monthly_update;
        random_prod_change:      return CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change:       randomise_primary_production_on_build;
        extra_text_industry:     ${industry.id}_extra_text;
		colour:                  ${industry.id}_colour;
	}
}

#include "../src/templates/undefs.pnml"
