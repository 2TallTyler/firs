/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

${industry.get_spritesets()}

${industry.get_spritelayouts()}

${industry.get_industry_layouts_as_graphic_switches()}

${industry.get_fence_switches()}

/* *************************************************
 * Definition of the industry tile and its callbacks
 * *************************************************/

TILE_DISALLOW_NEARBY_CLASS(tile_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile_player_check, ${industry.id}_tile_nearby_industry)
TILE_DISALLOW_TERRAIN     (tile_desert_check, TILETYPE_DESERT, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_tile_player_check)
TILE_CHECK_HEIGHT         (tile_location_check, 0, snowline_height, ${industry.id}_tile_desert_check, return string(STR_ERR_LOCATION_NOT_ABOVE_SNOWLINE))

item(FEAT_INDUSTRYTILES, ${industry.id}_tile, TILE_ARABLEFARM_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[FMSP, 8]];
		land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
	graphics {
		tile_check:   ${industry.id}_tile_location_check;
		${industry.id}_tile_fences;
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

${industry.get_industry_layouts_as_tilelayouts()}

/* *************************************************
 * Definition of the industry
 * *************************************************/

CHECK_NEARBY_CLUSTER(arable_farm,    10, 36, 1, 2, return CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (grain_mill,     16, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_arable_farm)
CHECK_INCOMPATIBLE  (brewery,        16, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_grain_mill)
CHECK_INCOMPATIBLE  (sugar_refinery, 16, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_brewery)
CHECK_INCOMPATIBLE  (biorefinery,    16, CB_RESULT_LOCATION_DISALLOW, ${industry.id}_sugar_refinery)
CHECK_FOUNDER       (${industry.id}_biorefinery)

SWITCH_COLOUR_SCHEME1(${industry.id}_colour)

#include "../src/templates/produce_primary.pnml"
#include "../src/templates/check_primary_production_level.pnml"

#include "../src/templates/extra_text_primary.pnml"

#include "../src/templates/check_availability.pnml"

${industry.get_industry_properties()}

if (${industry.get_conditional_expressions_for_enabled_economies()}) {
   item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
        /* Economy specific cargo */
        INDUSTRY_OUTPUT_CARGO_2(ENABLE_SUGARCANE && ENABLE_GRAIN, GRAI, SGCN)
    }
}

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
    graphics {
        produce_cargo_arrival:   ${industry.id}_produce;
        produce_256_ticks:       ${industry.id}_produce_256_ticks;
        construction_probability:${industry.id}_check_availability;
        location_check:          ${industry.id}_check_location;
        monthly_prod_change:     ${industry.id}_monthly_update;
        random_prod_change:      return CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change:       randomise_primary_production_on_build;
        extra_text_fund:         return string(STR_FUND_ARABLE_FARM);
        extra_text_industry:     ${industry.id}_extra_text;
        colour:                  ${industry.id}_colour;
    }
}

#include "../src/templates/undefs.pnml"
