/*
 * This file is part of FIRS industry set.
 * FIRS industry set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FIRS industry set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FIRS industry set. If not, see <http://www.gnu.org/licenses/>.
 */

#define THIS_ID(...) ${industry.id}_ ## __VA_ARGS__

/* **************
 * tile_trees
 * *************/

#define TREE_TEMPERATE_A 1593
#define TREE_TEMPERATE_B 1586

SLOPE_AWARE_SPRITELAYOUT(THIS_ID(tree_tile_layout))
	building {
		sprite: TREE_TEMPERATE_B;
		xoffset: 2;
		yoffset: 2;
		xextent: 13;
		yextent: 13;
		hide_sprite: climate != CLIMATE_TEMPERATE;
	}
	building {
		sprite: TREE_TEMPERATE_A;
		xoffset: 8;
		yoffset: 2;
		xextent: 7;
		yextent: 13;
		hide_sprite: climate != CLIMATE_TEMPERATE;
	}
	building {
		sprite: TREE_TEMPERATE_A;
		yoffset: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_TEMPERATE;
	}
	building {
		sprite: TREE_TEMPERATE_B;
		xoffset: 8;
		yoffset: 7;
		xextent: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_TEMPERATE;
	}

	building {
		sprite: 1817;
		xoffset: 2;
		yoffset: 2;
		xextent: 13;
		yextent: 13;
		hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height;
	}
	building {
		sprite: 1775;
		xoffset: 8;
		yoffset: 2;
		xextent: 7;
		yextent: 13;
		hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height;
	}
	building {
		sprite: 1817;
		yoffset: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height;
	}
	building {
		sprite: 1775;
		xoffset: 8;
		yoffset: 7;
		xextent: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) < snowline_height;
	}

	building {
		sprite: 1760;
		xoffset: 2;
		yoffset: 2;
		xextent: 13;
		yextent: 13;
		hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) >= snowline_height;
	}
	building {
		sprite: 1719;
		xoffset: 8;
		yoffset: 2;
		xextent: 7;
		yextent: 13;
		hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) >= snowline_height;
	}
	building {
		sprite: 1760;
		yoffset: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) >= snowline_height;
	}
	building {
		sprite: 1719;
		xoffset: 8;
		yoffset: 7;
		xextent: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_ARCTIC || nearby_tile_height(0, 0) >= snowline_height;
	}

	building {
		sprite: 1915;
		xoffset: 2;
		yoffset: 2;
		xextent: 13;
		yextent: 13;
		hide_sprite: climate != CLIMATE_TROPICAL || nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT;
	}
	building {
		sprite: 1923;
		xoffset: 8;
		yoffset: 2;
		xextent: 7;
		yextent: 13;
		hide_sprite: climate != CLIMATE_TROPICAL || nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT;
	}
	building {
		sprite: 1923;
		yoffset: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_TROPICAL || nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT;
	}
	building {
		sprite: 1915;
		xoffset: 8;
		yoffset: 7;
		xextent: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_TROPICAL || nearby_tile_terrain_type(0, 0) != TILETYPE_DESERT;
	}

	building {
		sprite: 1845;
		xoffset: 2;
		yoffset: 2;
		xextent: 13;
		yextent: 13;
		hide_sprite: climate != CLIMATE_TROPICAL || (climate == CLIMATE_TROPICAL && nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT);
	}
	building {
		sprite: 1866;
		xoffset: 8;
		yoffset: 2;
		xextent: 7;
		yextent: 13;
		hide_sprite: climate != CLIMATE_TROPICAL || (climate == CLIMATE_TROPICAL && nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT);
	}
	building {
		sprite: 1845;
		yoffset: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_TROPICAL || (climate == CLIMATE_TROPICAL && nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT);
	}
	building {
		sprite: 1866;
		xoffset: 8;
		yoffset: 7;
		xextent: 7;
		yextent: 8;
		hide_sprite: climate != CLIMATE_TROPICAL || (climate == CLIMATE_TROPICAL && nearby_tile_terrain_type(0, 0) == TILETYPE_DESERT);
	}
}

/* **************
 * tile_equipment
 * *************/

spriteset(spriteset_crane, "src/graphics/industries/forest_1.png") { tmpl_building_sprite(10, 10, 78, -45) }
spriteset(spriteset_bulldozer, "src/graphics/industries/forest_1.png") { tmpl_building_sprite(80, 10, 78, -45) }
spriteset(spriteset_tracks_snowtile, "src/graphics/industries/forest_1.png") { tmpl_building_sprite(220, 10, 78, -45) }

spritelayout THIS_ID(tile_equipment_nonsnow_spritelayout) {
	ground {
		sprite: 2022;
	}
	building {
		sprite: spriteset_crane;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		xextent: 7;
		yextent: 7;
		zextent: 7;
		always_draw: 1;
	}
	building {
		sprite: spriteset_bulldozer;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		xextent: 7;
		yextent: 7;
		zextent: 7;
		always_draw: 1;
	}
}

spritelayout THIS_ID(tile_equipment_snow_spritelayout) {
	ground {
		sprite: spriteset_tracks_snowtile;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
	}
	building {
		sprite: spriteset_crane;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		xextent: 7;
		yextent: 7;
		zextent: 7;
		always_draw: 1;
	}
	building {
		sprite: spriteset_bulldozer;
		recolour_mode: RECOLOUR_REMAP;
		palette: 0;
		xextent: 7;
		yextent: 7;
		zextent: 7;
		always_draw: 1;
	}
}

TILE_CHECK_HEIGHT(tile_equipment_height_check,  0, snowline_height,  THIS_ID(tile_equipment_nonsnow_spritelayout), THIS_ID(tile_equipment_snow_spritelayout))

switch(FEAT_INDUSTRYTILES, SELF, THIS_ID(tile_equipment_spritelayout), climate) {
	CLIMATE_ARCTIC: THIS_ID(tile_equipment_height_check);
	THIS_ID(tile_equipment_nonsnow_spritelayout);
}

/* ****************************************************
 * Definition of the industry tiles and their callbacks
 * ***************************************************/

TILE_DISALLOW_NEARBY_CLASS(tile_trees_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW,      return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile_trees_player_check,                                                                 THIS_ID(tile_trees_nearby_industry))
TILE_CHECK_WATER          (tile_trees_water_check,                          string(STR_ERR_LOCATION_NOT_ON_WATER),  THIS_ID(tile_trees_player_check))
TILE_DISALLOW_TERRAIN     (tile_trees_location_check,  TILETYPE_DESERT,     string(STR_ERR_LOCATION_NOT_IN_DESERT), THIS_ID(tile_trees_water_check))

item(FEAT_INDUSTRYTILES, tile_trees, TILE_FOREST_1) {
	property {
		substitute:       0;
		accepted_cargos:  [[FMSP, 8]];
		land_shape_flags: 0;
	}
	graphics {
		foundations: return CB_RESULT_NO_FOUNDATIONS;
		autoslope:   return CB_RESULT_NO_AUTOSLOPE;
		tile_check:  THIS_ID(tile_trees_location_check);
		THIS_ID(tree_tile_layout);
	}
}


TILE_DISALLOW_NEARBY_CLASS(tile_equipment_nearby_industry, TILE_CLASS_INDUSTRY, CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
TILE_ALLOW_PLAYER         (tile_equipment_player_check,                                                            THIS_ID(tile_equipment_nearby_industry))
TILE_CHECK_WATER          (tile_equipment_location_check,                       CB_RESULT_LOCATION_DISALLOW, THIS_ID(tile_equipment_player_check))

item(FEAT_INDUSTRYTILES, tile_equipment, TILE_FOREST_2) {
	property {
		substitute:       0;
		accepted_cargos:  [[FMSP, 8]];
		land_shape_flags: 0;
	}
	graphics {
		tile_check:   THIS_ID(tile_equipment_location_check);
		THIS_ID(tile_equipment_spritelayout);
	}
}

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

tilelayout tilelayout_forest_1 {
	0, 0: tile_trees;
	0, 1: tile_trees;
	0, 2: tile_trees;
	1, 0: tile_trees;
	1, 1: tile_trees;
	1, 2: tile_trees;
	2, 1: tile_trees;
	2, 2: tile_equipment;
}

tilelayout tilelayout_forest_2 {
	0, 0: tile_trees;
	0, 1: tile_trees;
	0, 2: tile_trees;
	1, 0: tile_trees;
	1, 1: tile_trees;
	1, 2: tile_trees;
	3, 0: tile_trees;
	3, 1: tile_trees;
	3, 2: tile_equipment;
	4, 0: tile_trees;
	4, 1: tile_trees;
	4, 2: tile_trees;
}

tilelayout tilelayout_forest_3 {
	0, 1: tile_trees;
	0, 2: tile_trees;
	0, 3: tile_trees;
	1, 0: tile_trees;
	1, 1: tile_trees;
	1, 2: tile_trees;
	1, 3: tile_trees;
	1, 4: tile_trees;
	2, 0: tile_trees;
	2, 1: tile_trees;
	2, 2: tile_trees;
	2, 3: tile_trees;
	3, 0: tile_trees;
	3, 1: tile_trees;
	3, 2: tile_equipment;
	4, 0: tile_trees;
	4, 1: tile_trees;
	5, 0: tile_trees;
	5, 1: tile_trees;
	5, 2: tile_trees;
}

/* *************************************************
 * Definition of the industry
 * *************************************************/

CHECK_NEARBY_CLUSTER(forest,       15, 80, 3, 4, return CB_RESULT_LOCATION_DISALLOW, return CB_RESULT_LOCATION_ALLOW)
CHECK_INCOMPATIBLE  (sawmill,      16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(forest))
CHECK_INCOMPATIBLE  (paper_mill,   16, CB_RESULT_LOCATION_DISALLOW, THIS_ID(sawmill))
CHECK_FOUNDER       (THIS_ID(paper_mill))

SWITCH_COLOUR_SCHEME1(THIS_ID(colour))

${industry.get_primary_supplies_stuff()}
${industry.get_extra_text_switch()}

#include "../../src/templates/check_availability.pnml"

${industry.get_industry_properties()}

item(FEAT_INDUSTRIES, ${industry.id}, ${industry.get_numeric_id()}) {
	graphics {
		produce_cargo_arrival:   THIS_ID(produce);
		construction_probability:THIS_ID(check_availability);
		location_check:          THIS_ID(check_location);
		produce_256_ticks:       THIS_ID(produce_256_ticks);
		monthly_prod_change:     THIS_ID(monthly_update);
        random_prod_change:      return CB_RESULT_IND_PROD_NO_CHANGE;
		build_prod_change:       randomise_primary_production_on_build;
		extra_text_fund:         return string(STR_FUND_FOREST);
		colour:                  THIS_ID(colour);
	}
}

#include "../../src/templates/undefs.pnml"
