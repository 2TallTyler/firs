// Action2/3-chain for cargo processing at secondary industries
// Currently designed for secondary industries with three independent inputs, two outputs, no production boost
// May be able to template for number of input/output cargos

// How to use:
// Add to the top of a primary industry a few #define lines. For example:
//#define THIS_INDUSTRY                 IND_TEXTILE_MILL
//#define THIS_NUM_INPUT_CARGOS         \d02      // range 01-02  // do not include prod boost cargo
//#define THIS_NUM_OUTPUT_CARGOS        \d02      // range 01-02
//#define THIS_PROD_RATIO_CARGO_IN_1    \d01      // do not set to 0 - used for division
//#define THIS_PROD_RATIO_CARGO_IN_2    \d01      // do not set to 0 - used for division
//#define THIS_PROD_RATIO_CARGO_IN_3    \d01      // do not set to 0 - used for division  // !! remove when code cleaned
//#define THIS_STR_INFO_CB38            STR_INFO_MACHINESHOP

// then add as the 2nd last line, prior to the end of the climate availability label
// #include "../../templates/template_secondary_action23_A.pnfo"

// In principle you can also add the defines immediately above this #define line...

// Preferred action 2 ID ranges, to keep life simple...
//   production code	00-0F, A0-AF
//   cargo acceptance	B0-BF
//   misc branching, handle callbacks etc	C0-CF
//   monthly / random production change	D0-DF
//   texts	E0-FF
//   generally unused and available	10-9F

//3 input cargos
//2 output cargos
//1:1 production ratio input:output 
//50:50 distribution to output cargos C1 output = 50% total input, C1 output = 50% total input

// !! there may be flawed logic here; if production ratio is < 8, I think too much / not enough input cargo may be used.  Needs checking.

// production code 
//!! case of 0 output cargo? - probably a different template...
-1 * 0 02 0A 00 //production cb, 1 output cargo 
	01 //version
	07  08  09 //<subtract-in-1..3>
	0A  0B //<add-out-1..2>
	00 //don't repeat

-1 * 0 02 0A AC //where one cargo produced, all of production goes in register 0A, register 0B is zeroed
    89 // 
      1A 20 \dx00 // create 0
      10 1A 20 \dx0B //store in persistent storage (for debug only, can be commented if not in use)
      \2sto 1A 20 \dx0B //store in register
      0F
      7D 0A 20  \dxFFFFFFFF //get stored amount for total cargo output
      10 1A 20 \dx0A //store in persistent storage (for debug only, can be commented if not in use)
      \2sto 1A 00 \dx0A //store in register
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       00 00  00 00 00 00  00 00 00 00
     00 00 //default

-1 * 0 02 0A AB //where two cargos produced, industry output is split 50:50
    89 // 
      7D 0A 20  \dxFFFFFFFF //get stored amount for total cargo output
      \2/ 1A 20 THIS_NUM_OUTPUT_CARGOS
      10 1A 20 \dx0A //store in persistent storage (for debug only, can be commented if not in use)
      \2sto 1A 20 \dx0A //store in register
      10 1A 20 \dx0B //store in persistent storage (for debug only, can be commented if not in use)
      \2sto 1A 00 \dx0B //store in register
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       00 00  00 00 00 00  00 00 00 00
     00 00 //default

-1 * 0 02 0A AA //how many output cargos do we have?  branch accordingly (branching easier than advanced varaction 2 here)
    89 // 
      1A 00 THIS_NUM_OUTPUT_CARGOS 
    \b1 //range
       AB 00  \d02  \d02
     AC 00 //default

-1 * 0 02 0A A9 //add up total cargo produced...for this industry output is split 50:50, so only bother setting one register
    89 // 
      7C 04 20  \dxFFFFFFFF //get stored amount for production from cargo 1
      \2+ 7C 05 20  \dxFFFFFFFF //get stored amount for production from cargo 2
      \2+ 7C 06 20  \dxFFFFFFFF //get stored amount for production from cargo 3 
      10 1A 20 \dx0A //store in persistent storage (for debug only, can be commented if not in use)
      \2sto 1A 00 \dx0A //store in register
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       AA 00  00 00 00 00  00 00 00 00
     AA 00 //default


-1 * 0 02 0A A8 //calculate amount of input cargo actually processed
    89 // 
      7C 05 20  \dxFFFFFFFF //get stored amount for production from cargo 2
      \2/ 7C 02 20  \dxFFFFFFFF //divide production amount by production ratio 
      \2* 1A 20 \d08 // multiply result by 8
      10 1A 20 \dx08 //store in persistent storage (for debug only, can be commented if not in use)
      \2sto 1A 00 \dx08 //store in register
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       A9 00  00 00 00 00  00 00 00 00
     A9 00 //default

-1 * 0 02 0A A7 //calculate amount of input cargo actually processed
    89 // 
      7C 04 20  \dxFFFFFFFF //get stored amount for production from cargo 1
      \2/ 7C 01 20  \dxFFFFFFFF //divide production amount by production ratio 
      \2* 1A 20 \d08 // multiply result by 8
      10 1A 20 \dx07 //store in persistent storage (for debug only, can be commented if not in use)
      \2sto 1A 00 \dx07 //store in register
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       A8 00  00 00 00 00  00 00 00 00
     A8 00 //default

-1 * 0 02 0A A6 //store lower value of: (cargo waiting divided by prod ratio for cargo) or (output limit for produced cargo) 
    89 // 
      41 20  \dxFFFFFFFF // cargo waiting 
      \2/ 1A 20  \d08 //divide cargo waiting by 8
      \2* 7C 02 20  \dxFFFFFFFF //multiply cargo waiting by production ratio to get calculated production value
      \2< 7C 00 20  \dxFFFFFFFF //result = min(calculated production value, output limit for produced cargo)
      10 1A 00 \dx05 //store in persistent storage (could use ordinary register, but this is easier to debug)
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       A7 00  00 00 00 00  00 00 00 00
     A7 00 //default

-1 * 0 02 0A A5 //store lower value of: (cargo waiting divided by prod ratio for cargo) or (output limit for produced cargo) 
    89 // 
      40 20  \dxFFFFFFFF // cargo waiting 
      \2/ 1A 20  \d08 //divide cargo waiting by 8
      \2* 7C 01 20  \dxFFFFFFFF //divide cargo waiting by production ratio to get calculated production value 
      \2< 7C 00 20  \dxFFFFFFFF //result = min(calculated production value, output limit for produced cargo)
      10 1A 00 \dx04 //store in persistent storage (could use ordinary register, but this is easier to debug)
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       A6 00  00 00 00 00  00 00 00 00
     A6 00 //default

// A2, A3, A4 free
        
-1 * 0 02 0A A1 //store production ratios for cargo 2
    89 // using type 89 because register IDs are better specified as double words
      1A 20  THIS_PROD_RATIO_CARGO_IN_2 //production ratio (number of units input to create 1 unit output)    
      10  1A 00 \dx02 //store in persistent storage (could use ordinary register, but this is easier to debug)
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       A5 00  00 00 00 00  00 00 00 00
     A5 00
       
-1 * 0 02 0A A0 //store production ratios for cargo 1
    89 // using type 89 because register IDs are better specified as double words
      1A 20  THIS_PROD_RATIO_CARGO_IN_1 //production ratio (number of units input to create 1 unit output)
      10  1A 00 \dx01 // store in persistent storage
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       A1 00  00 00 00 00  00 00 00 00
     A1 00


// industry window texts
// production boost cargo - branching chain based on number of input cargos defined 
// value for THIS_NUM_INPUT_CARGOS should not include prod boost cargo 
-1 * 0 02 0A E1//handle cb 37 cargo subtexts (used here to provide max cargo limit information)
  81 18 00 FF 
  \b1
    STR_INFO_LIMIT_800 80 01 01 // prod boost subtext for second cargo
  FF FF	 //default

-1 * 0 02 0A E2//handle cb 37 cargo subtexts (used here to provide max cargo limit information)
  81 18 00 FF 
  \b1
    STR_INFO_LIMIT_800 80 02 02 // prod boost subtext for third cargo
  FF FF	 //default
  
-1 * 0 02 0A E0 //production boost cargo may be in position 2 or 3 depending on number of input cargos 
    89 // 
      1A 00 THIS_NUM_INPUT_CARGOS 
    \b1 //range
       E2 00  \d02  \d02
     E1 00 //default

// PROVIDE DEBUG INFO TO INDUSTRY WINDOW 
//Remember text stack is LIFO (like array.pop) - put values to render first in highest registers
-1 * 0 02 0A FD //store two values to text stack for debugging
    89 // 
      7c 0C 20 \dxffff
      \2ror 1a 20 \d16
      \2| 7c 0B 20 \dxffff
      \2sto 1a 00 \dx103
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       STR_INFO_DEBUG_2 80  00 00 00 00  00 00 00 00
     STR_INFO_DEBUG_2 80 //default

-1 * 0 02 0A FC //store two values to text stack for debugging
    89 // 
      7c 0A 20 \dxffff
      \2ror 1a 20 \d16
      \2| 7c 09 20 \dxffff
      \2sto 1a 00 \dx102
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       FD 00  00 00 00 00  00 00 00 00
     FD 00 //default
     
-1 * 0 02 0A FB //store two values to text stack for debugging
    89 // 
      7c 07 20 \dxffff
      \2ror 1a 20 \d16
      \2| 7c 08 20 \dxffff
      \2sto 1a 00 \dx101
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       FC 00  00 00 00 00  00 00 00 00
     FC 00 //default

-1 * 0 02 0A FA //store two values to text stack for debugging
    89
      7c 02 20 \dxffff  
      \2ror 1a 20 \d16
      \2| 7c 01 20 \dxffff
      \2sto 1a 00 \dx100
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       FB 00  00 00 00 00  00 00 00 00
     FB 00 //default


// WRITE OUT WHICH REGISTERS / PERSISTENT STORAGE ARE USED FOR WHAT
// PSEUDO 
// Assume prod boost cargo is in slot 3
// varaction 2 checking cargo 42 (slot 3)
// if prod boost cargo is waiting branch action 2s to:
  // store production ratio of 100% 
  // store 50t of consumption for prod boost (no production from this), may need to branch to run down cargo accurately
  // else store production ratio as defined for THIS_PROD_RATIO_CARGO_IN_1, THIS_PROD_RATIO_CARGO_IN_2 (how to handle multiple input cargos?)
// then use existing production calculation code, stripping code for cargo 3

// unfinished start of branch for checking prod boost cargo waiting 
-1 * 0 02 0A C2 //production boost cargo may be in position 2 or 3 depending on number of input cargos
    89 // 
      1A 00 THIS_NUM_INPUT_CARGOS 
    \b1 //range
       A0 00  \d02  \d02
     A0 00 //default

// !! the logic for output limit is flawed.  This assumes limit is FF FF; when 2 output cargos are split 50:50, output limit before split is 2 * FF FF
// TTDPatch wiki for production callback: "results are clamped to the allowed range (0..32767 for incoming cargo amounts, 0..65535 for outgoing cargo amounts)."
-1 * 0 02 0A C1 //store output limit for produced cargo (as units of output cargo) to use when processing each input cargo
    89 // using type 89 because register IDs are better specified as double words
      1A 20  \dxFFFF // create a value (constant 1A); total production limit is FF FF per output cargo
      \2/ 1a 20 THIS_NUM_INPUT_CARGOS // divide by number of input cargos for this industry (exclude production-boosting cargos from input cargo count)
      10  1A 00 \dx00 // store in persistent storage
    \b1 //range (stay out of the nvar=0 bear pit by checking one range, but returning same for both)
       A0 00  00 00 00 00  00 00 00 00
     A0 00

// handle callbacks
-1 * 0 02 0A C0 //-1 * 0 0A <set-id>
	85 0C //<type> <variable> word-access callback
	00 FF FF //no shift, no mask
	\b3 //number of ranges to check
	  THIS_STR_INFO_CB38 80   38 00   38 00 ////cb 38 display additional text in fund window
	  E0 00   37 00   37 00 //cargo subtext industry window cb 37
	  FA 00   3A 00   3A 00 //cb 3A (industry window)
	C1 00 //default

// industry action 3 attach varaction2 chain to industry
-1 * 0 03 0A 01 THIS_INDUSTRY 00 \wxC0 //-1 * 0 03 09 <n-ids> <id> 00 <def-cid>	

#undef THIS_INDUSTRY
#undef THIS_STR_INFO_CB38
#undef THIS_NUM_INPUT_CARGOS
#undef THIS_NUM_OUTPUT_CARGOS
#undef THIS_PROD_BOOST_CARGO 
#undef THIS_PROD_RATIO_CARGO_IN_1
#undef THIS_PROD_RATIO_CARGO_IN_2
#undef THIS_PROD_RATIO_CARGO_IN_3
